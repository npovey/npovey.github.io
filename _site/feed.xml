<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-01-10T03:55:13-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">speech processing</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">LibriSpeech training</title><link href="http://localhost:4000/jekyll/update/2022/01/10/L.html" rel="alternate" type="text/html" title="LibriSpeech training" /><published>2022-01-10T00:07:21-08:00</published><updated>2022-01-10T00:07:21-08:00</updated><id>http://localhost:4000/jekyll/update/2022/01/10/L</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/01/10/L.html"><![CDATA[<ul>
  <li><a href="#step-0-make-a-copy-of-runsh">Step 0: Make a copy of run.sh</a></li>
  <li><a href="#step-1-install-flac">Step 1: Install flac</a></li>
  <li><a href="#step-2--change-cmdsh">Step 2:  Change cmd.sh</a></li>
  <li><a href="#step-3-needed-if-only-one-gpu-is-used">Step 3: Needed if only one GPU is used</a></li>
  <li><a href="#step-4-create-a-screen-to-run-the-script">Step 4: Create a screen to run the script.</a></li>
  <li><a href="#step-5-run-run_editedsh">Step 5: Run run_edited.sh</a></li>
</ul>

<p>LibriSpeech training will need at least one GPU and 400GB storage space. The tutorial below was created using AWS instance.</p>

<h3 id="step-0-make-a-copy-of-runsh">Step 0: Make a copy of run.sh</h3>

<p>Normally I copy the <a href="http://run.sh">run.sh</a> to new file that I can edit. But we can edit original run.sh if wanted.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp </span>run.sh run_edited.sh
</code></pre></div></div>

<p>Need to edit path to where we want to put all downloaded folders</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano run_edited.sh
</code></pre></div></div>

<p>Edit the new version. Add few lines after line 7. Pick a data folder location that you want. I chose the one below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> nadira/data
<span class="nv">data</span><span class="o">=</span>nadira/data
</code></pre></div></div>

<p>Line 17 was <code class="highlighter-rouge">data=/export/a15/vpanayotov/data</code> , If you don’t have that folder you can create it, or just make a data folder.</p>

<p><code class="highlighter-rouge">run_edited.sh</code> top few lines:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># Set this to somewhere where you want to put your data, or where</span>
<span class="c"># someone else has already put it.  You'll want to change this</span>
<span class="c"># if you're not on the CLSP grid.</span>
<span class="c"># data=/export/a15/vpanayotov/data</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> nadira/data <span class="c"># &lt;--- added</span>
<span class="nv">data</span><span class="o">=</span>nadira/data <span class="c"># &lt;--- added</span>
<span class="c"># base url for downloads.</span>
<span class="nv">data_url</span><span class="o">=</span>www.openslr.org/resources/12
<span class="nv">lm_url</span><span class="o">=</span>www.openslr.org/resources/11
</code></pre></div></div>

<h3 id="step-1-install-flac">Step 1: Install flac</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu@ip-172-31-6-144:~/kaldi/egs/librispeech/s5<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install </span>flac
</code></pre></div></div>

<h3 id="step-2--change-cmdsh">Step 2:  Change cmd.sh</h3>

<p>Comment out the last 3 lines and add three lines that you see below. As AWS doesn’t have qsub package we can’t use the last 3 lines.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># you can change cmd.sh depending on what type of queue you are using.</span>
<span class="c"># If you have no queueing system and want to run on a local machine, you</span>
<span class="c"># can change all instances 'queue.pl' to run.pl (but be careful and run</span>
<span class="c"># commands one by one: most recipes will exhaust the memory on your</span>
<span class="c"># machine).  queue.pl works with GridEngine (qsub).  slurm.pl works</span>
<span class="c"># with slurm.  Different queues are configured differently, with different</span>
<span class="c"># queue names and different ways of specifying things like memory;</span>
<span class="c"># to account for these differences you can create and edit the file</span>
<span class="c"># conf/queue.conf to match your queue's configuration.  Search for</span>
<span class="c"># conf/queue.conf in http://kaldi-asr.org/doc/queue.html for more information,</span>
<span class="c"># or search for the string 'default_config' in utils/queue.pl or utils/slurm.pl.</span>

<span class="c"># comment out line below as we don't have qsub on AWS</span>
<span class="c"># export train_cmd="queue.pl --mem 2G"</span>
<span class="c"># export decode_cmd="queue.pl --mem 4G"</span>
<span class="c"># export mkgraph_cmd="queue.pl --mem 8G"</span>

<span class="c"># my instance has 8 vCPUs</span>
<span class="nb">export </span><span class="nv">train_cmd</span><span class="o">=</span><span class="s2">"run.pl --max-jobs-run 8"</span>
<span class="nb">export </span><span class="nv">decode_cmd</span><span class="o">=</span><span class="s2">"run.pl --max-jobs-run 8"</span>
<span class="nb">export </span><span class="nv">mkgraph_cmd</span><span class="o">=</span><span class="s2">"run.pl --max-jobs-run 8"</span>
</code></pre></div></div>

<h3 id="step-3-needed-if-only-one-gpu-is-used">Step 3: Needed if only one GPU is used</h3>

<p>Need to change the option for nvidia-smi otherwise it will assume that we have multiple GPUs. My AWS instance only has one GPU.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>nvidia-smi <span class="nt">-c</span> 3
</code></pre></div></div>

<p>ubuntu@ip-172-31-6-144:~/kaldi/egs/librispeech/s5$ pico local/chain/run_tdnn.sh</p>

<p>add <code class="highlighter-rouge">--use-gpu=wait \</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>steps/nnet3/chain/train.py <span class="nt">--stage</span> <span class="nv">$train_stage</span> <span class="se">\</span>
    <span class="nt">--cmd</span> <span class="s2">"</span><span class="nv">$decode_cmd</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">--use-gpu</span><span class="o">=</span><span class="nb">wait</span> <span class="se">\</span>
    <span class="nt">--feat</span>.online-ivector-dir <span class="nv">$train_ivector_dir</span> <span class="se">\</span>
    <span class="nt">--feat</span>.cmvn-opts <span class="s2">"--norm-means=false --norm-vars=false"</span> <span class="se">\</span>
    <span class="nt">--chain</span>.xent-regularize <span class="nv">$xent_regularize</span> <span class="se">\</span>
    <span class="nt">--chain</span>.leaky-hmm-coefficient 0.1 <span class="se">\</span>
    <span class="nt">--chain</span>.l2-regularize 0.0 <span class="se">\</span>
    <span class="nt">--chain</span>.apply-deriv-weights <span class="nb">false</span> <span class="se">\</span>
    <span class="nt">--chain</span>.lm-opts<span class="o">=</span><span class="s2">"--num-extra-lm-states=2000"</span> <span class="se">\</span>
    <span class="nt">--egs</span>.dir <span class="s2">"</span><span class="nv">$common_egs_dir</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">--egs</span>.stage <span class="nv">$get_egs_stage</span> <span class="se">\</span>
    <span class="nt">--egs</span>.opts <span class="s2">"--frames-overlap-per-eg 0 --constrained false"</span> <span class="se">\</span>
    <span class="nt">--egs</span>.chunk-width <span class="nv">$frames_per_eg</span> <span class="se">\</span>
    <span class="nt">--trainer</span>.dropout-schedule <span class="nv">$dropout_schedule</span> <span class="se">\</span>
    <span class="nt">--trainer</span>.add-option<span class="o">=</span><span class="s2">"--optimization.memory-compression-level=2"</span> <span class="se">\</span>
    <span class="nt">--trainer</span>.num-chunk-per-minibatch 64 <span class="se">\</span>
    <span class="nt">--trainer</span>.frames-per-iter 2500000 <span class="se">\</span>
    <span class="nt">--trainer</span>.num-epochs 4 <span class="se">\</span>
    <span class="nt">--trainer</span>.optimization.num-jobs-initial 3 <span class="se">\</span>
    <span class="nt">--trainer</span>.optimization.num-jobs-final 16 <span class="se">\</span>
    <span class="nt">--trainer</span>.optimization.initial-effective-lrate 0.00015 <span class="se">\</span>
    <span class="nt">--trainer</span>.optimization.final-effective-lrate 0.000015 <span class="se">\</span>
    <span class="nt">--trainer</span>.max-param-change 2.0 <span class="se">\</span>
    <span class="nt">--cleanup</span>.remove-egs <span class="nv">$remove_egs</span> <span class="se">\</span>
    <span class="nt">--feat-dir</span> <span class="nv">$train_data_dir</span> <span class="se">\</span>
    <span class="nt">--tree-dir</span> <span class="nv">$tree_dir</span> <span class="se">\</span>
    <span class="nt">--lat-dir</span> <span class="nv">$lat_dir</span> <span class="se">\</span>
    <span class="nt">--dir</span> <span class="nv">$dir</span>  <span class="o">||</span> <span class="nb">exit </span>1<span class="p">;</span>
</code></pre></div></div>

<p>If step 3 is not done when using only one GPU we will get error below:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ERROR <span class="o">(</span>nnet3-chain-train[5.5.997~1-054af]:AllocateNewRegion<span class="o">()</span>:cu-allocator.cc:491<span class="o">)</span> Failed to allocate a memory region of 12582912 bytes.  Possibly this is due to sharing the GPU.  Try switching the GPUs to exclusive mode <span class="o">(</span>nvidia-smi <span class="nt">-c</span> 3<span class="o">)</span> and using the option <span class="nt">--use-gpu</span><span class="o">=</span><span class="nb">wait </span>to scripts like steps/nnet3/chain/train.py.  Memory info: free:10M, used:15099M, total:15109M, free/total:0.000711461 CUDA error: <span class="s1">'out of memory'</span>
</code></pre></div></div>

<h3 id="step-4-create-a-screen-to-run-the-script">Step 4: Create a screen to run the script.</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>screen <span class="nt">-S</span> libri

</code></pre></div></div>

<h3 id="step-5-run-run_editedsh">Step 5: Run run_edited.sh</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./run_edited.sh <span class="o">&gt;</span> output.txt
</code></pre></div></div>

<p>The following results can be observed after 10 days of training. My instance has 8 vCPUs and 1GPU.</p>

<p>Training is completed. We can find final Neural Net system in <code class="highlighter-rouge">exp/chain_cleaned/tdnn_1d_sp/final.mdl</code></p>

<p>and graph in <code class="highlighter-rouge">exp/chain_cleaned/tdnn_1d_sp/graph_tgsmall/HCLG.fst</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2022-01-09 02:15:39,486 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 496/520   Jobs: 15   Epoch: 3.67/4.0 <span class="o">(</span>91.8% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000272
2022-01-09 02:50:23,893 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 497/520   Jobs: 15   Epoch: 3.68/4.0 <span class="o">(</span>92.1% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000270
2022-01-09 03:25:41,148 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 498/520   Jobs: 15   Epoch: 3.69/4.0 <span class="o">(</span>92.4% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000268
2022-01-09 04:01:32,203 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 499/520   Jobs: 15   Epoch: 3.71/4.0 <span class="o">(</span>92.7% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000266
2022-01-09 04:37:38,180 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 500/520   Jobs: 15   Epoch: 3.72/4.0 <span class="o">(</span>93.0% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000264
2022-01-09 05:14:40,809 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 501/520   Jobs: 16   Epoch: 3.73/4.0 <span class="o">(</span>93.3% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000280
2022-01-09 05:53:18,670 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 502/520   Jobs: 16   Epoch: 3.74/4.0 <span class="o">(</span>93.6% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000278
2022-01-09 06:31:05,279 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 503/520   Jobs: 16   Epoch: 3.76/4.0 <span class="o">(</span>93.9% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000276
2022-01-09 07:08:46,082 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 504/520   Jobs: 16   Epoch: 3.77/4.0 <span class="o">(</span>94.2% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000274
2022-01-09 07:47:07,220 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 505/520   Jobs: 16   Epoch: 3.78/4.0 <span class="o">(</span>94.6% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000272
2022-01-09 08:23:57,390 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 506/520   Jobs: 16   Epoch: 3.80/4.0 <span class="o">(</span>94.9% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000270
2022-01-09 09:02:17,142 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 507/520   Jobs: 16   Epoch: 3.81/4.0 <span class="o">(</span>95.2% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000268
2022-01-09 09:40:52,534 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 508/520   Jobs: 16   Epoch: 3.82/4.0 <span class="o">(</span>95.5% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000266
2022-01-09 10:18:47,231 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 509/520   Jobs: 16   Epoch: 3.83/4.0 <span class="o">(</span>95.9% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000264
2022-01-09 10:57:05,727 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 510/520   Jobs: 16   Epoch: 3.85/4.0 <span class="o">(</span>96.2% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000262
2022-01-09 11:35:18,583 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 511/520   Jobs: 16   Epoch: 3.86/4.0 <span class="o">(</span>96.5% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000260
2022-01-09 12:12:56,573 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 512/520   Jobs: 16   Epoch: 3.87/4.0 <span class="o">(</span>96.8% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000258
2022-01-09 12:51:06,920 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 513/520   Jobs: 16   Epoch: 3.89/4.0 <span class="o">(</span>97.2% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000256
2022-01-09 13:29:19,736 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 514/520   Jobs: 16   Epoch: 3.90/4.0 <span class="o">(</span>97.5% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000254
2022-01-09 14:07:52,940 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 515/520   Jobs: 16   Epoch: 3.91/4.0 <span class="o">(</span>97.8% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000252
2022-01-09 14:46:16,641 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 516/520   Jobs: 16   Epoch: 3.92/4.0 <span class="o">(</span>98.1% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000251
2022-01-09 15:24:13,838 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 517/520   Jobs: 16   Epoch: 3.94/4.0 <span class="o">(</span>98.4% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000249
2022-01-09 16:01:52,900 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 518/520   Jobs: 16   Epoch: 3.95/4.0 <span class="o">(</span>98.8% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000247
2022-01-09 16:40:28,511 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 519/520   Jobs: 16   Epoch: 3.96/4.0 <span class="o">(</span>99.1% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000245
2022-01-09 17:18:47,249 <span class="o">[</span>steps/nnet3/chain/train.py:529 - train - INFO <span class="o">]</span> Iter: 520/520   Jobs: 16   Epoch: 3.98/4.0 <span class="o">(</span>99.4% <span class="nb">complete</span><span class="o">)</span>   lr: 0.000240
2022-01-09 17:58:31,315 <span class="o">[</span>steps/nnet3/chain/train.py:585 - train - INFO <span class="o">]</span> Doing final combination to produce final.mdl
2022-01-09 17:58:31,315 <span class="o">[</span>steps/libs/nnet3/train/chain_objf/acoustic_model.py:571 - combine_models - INFO <span class="o">]</span> Combining <span class="nb">set</span><span class="o">([</span>512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]<span class="o">)</span> models.
2022-01-09 17:59:36,259 <span class="o">[</span>steps/nnet3/chain/train.py:614 - train - INFO <span class="o">]</span> Cleaning up the experiment directory exp/chain_cleaned/tdnn_1d_sp
tree-info exp/chain_cleaned/tdnn_1d_sp/tree
tree-info exp/chain_cleaned/tdnn_1d_sp/tree
fstcomposecontext <span class="nt">--context-size</span><span class="o">=</span>2 <span class="nt">--central-position</span><span class="o">=</span>1 <span class="nt">--read-disambig-syms</span><span class="o">=</span>data/lang_test_tgsmall/phones/disambig.int <span class="nt">--write-disambig-syms</span><span class="o">=</span>data/lang_test_tgsmall/tmp/disambig_ilabels_2_1.int data/lang_test_tgsmall/tmp/ilabels_2_1.2242 data/lang_test_tgsmall/tmp/LG.fst
fstisstochastic data/lang_test_tgsmall/tmp/CLG_2_1.fst
make-h-transducer <span class="nt">--disambig-syms-out</span><span class="o">=</span>exp/chain_cleaned/tdnn_1d_sp/graph_tgsmall/disambig_tid.int <span class="nt">--transition-scale</span><span class="o">=</span>1.0 data/lang_test_tgsmall/tmp/ilabels_2_1 exp/chain_cleaned/tdnn_1d_sp/tree exp/chain_cleaned/tdnn_1d_sp/final.mdl
fstrmsymbols exp/chain_cleaned/tdnn_1d_sp/graph_tgsmall/disambig_tid.int
fstminimizeencoded
fstrmepslocal
fsttablecompose exp/chain_cleaned/tdnn_1d_sp/graph_tgsmall/Ha.fst <span class="s1">'fstrmsymbols --remove-arcs=true --apply-to-output=true data/lang_test_tgsmall/oov.int data/lang_test_tgsmall/tmp/CLG_2_1.fst|'</span>
fstdeterminizestar <span class="nt">--use-log</span><span class="o">=</span><span class="nb">true
</span>fstrmsymbols <span class="nt">--remove-arcs</span><span class="o">=</span><span class="nb">true</span> <span class="nt">--apply-to-output</span><span class="o">=</span><span class="nb">true </span>data/lang_test_tgsmall/oov.int data/lang_test_tgsmall/tmp/CLG_2_1.fst
fstisstochastic exp/chain_cleaned/tdnn_1d_sp/graph_tgsmall/HCLGa.fst
add-self-loops <span class="nt">--self-loop-scale</span><span class="o">=</span>1.0 <span class="nt">--reorder</span><span class="o">=</span><span class="nb">true </span>exp/chain_cleaned/tdnn_1d_sp/final.mdl exp/chain_cleaned/tdnn_1d_sp/graph_tgsmall/HCLGa.fst
fstisstochastic exp/chain_cleaned/tdnn_1d_sp/graph_tgsmall/HCLG.fst
fstrmsymbols data/lang_test_tgmed/phones/disambig.int
fstdeterminizestar
fstrmsymbols data/lang_test_tgmed/phones/disambig.int
fstdeterminizestar
fstdeterminizestar
fstrmsymbols data/lang_test_tgmed/phones/disambig.int
fstrmsymbols data/lang_test_tgmed/phones/disambig.int
fstdeterminizestar
ubuntu@ip-172-31-6-144:~/kaldi/egs/librispeech/s5<span class="err">$</span>
</code></pre></div></div>

<p>graph folder:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu@ip-172-31-6-144:~/kaldi/egs/librispeech/s5/exp/chain_cleaned/tdnn_1d_sp/graph_tgsmall<span class="nv">$ </span><span class="nb">ls
</span>HCLG.fst  disambig_tid.int  num_pdfs  phones  phones.txt  words.txt
ubuntu@ip-172-31-6-144:~/kaldi/egs/librispeech/s5/exp/chain_cleaned/tdnn_1d_sp/graph_tgsmall<span class="err">$</span>
</code></pre></div></div>

<!-- 
<div id="disqus_thread"></div>
<script>
/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: [https://disqus.com/admin/universalcode/#configuration-variables](https://disqus.com/admin/universalcode/#configuration-variables)    */
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = '[https://https-npovey-github-io.disqus.com/embed.js](https://https-npovey-github-io.disqus.com/embed.js)';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="[https://disqus.com/?ref_noscript](https://disqus.com/?ref_noscript)">comments powered by Disqus.</a></noscript>

 -->

<div id="disqus_thread"></div>
<script>
var disqus_config = function () {
this.page.url = "https://npovey.github.io/jekyll/update/2022/01/10/L.html"; // <--- use canonical URL
this.page.identifier = "/jekyll/update/2022/01/10/L";
};
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');

s.src = '//https-npovey-github-io.disqus.com/embed.js'; // <--- use Disqus shortname

s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Step 0: Make a copy of run.sh Step 1: Install flac Step 2: Change cmd.sh Step 3: Needed if only one GPU is used Step 4: Create a screen to run the script. Step 5: Run run_edited.sh]]></summary></entry><entry><title type="html">AWS &amp;amp; Kaldi Installation</title><link href="http://localhost:4000/jekyll/update/2022/01/02/AWS-Kaldi-Installation.html" rel="alternate" type="text/html" title="AWS &amp;amp; Kaldi Installation" /><published>2022-01-02T00:07:21-08:00</published><updated>2022-01-02T00:07:21-08:00</updated><id>http://localhost:4000/jekyll/update/2022/01/02/AWS-Kaldi-Installation</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/01/02/AWS-Kaldi-Installation.html"><![CDATA[<ul>
  <li><a href="#step-1-choose-an-instance-on-aws">Step 1: Choose an instance on AWS</a></li>
  <li><a href="#step-2-download-kaldi-from-github">Step 2: Download Kaldi from GitHub</a></li>
  <li><a href="#step-3-read-the-kaldi-installation-instructions-and-follow-option-1">Step 3: Read the Kaldi installation instructions and follow Option 1</a></li>
  <li><a href="#step-3-go-to-tools--and-follow-install-instructions-there">Step 3: Go to tools/  and follow INSTALL instructions there.</a></li>
  <li><a href="#step-4-go-to-src-and-follow-install-instructions-there">Step 4: go to src/ and follow INSTALL instructions there.</a></li>
</ul>

<p>YouTube Tutorial Install Kaldi AWS Ubuntu:
<a href="https://youtu.be/NuB2BTYNosE">https://youtu.be/NuB2BTYNosE</a></p>
<h3 id="step-1-choose-an-instance-on-aws">Step 1: Choose an instance on AWS</h3>

<p><img src="/Export_aws/AWS_Kaldi_Installation/aws.png" alt="png" /></p>

<p>Select the <code class="highlighter-rouge">g4dn.2xlarge</code> instance as it has 8 vCPUs and 1 GPU, and its 75 cents per hour, so make sure to pause the instance when you’re not using it. Need 10 days of training. For Step 3, select a specific subnet. This is optional since it defaults to a random region. For Step 4, disable the “Delete on Termination” setting and change the Root’s size to 600 GB. From personal experience, 400GB isn’t going to be enough. Then, you can skip to step 7, review the instance settings, and launch the instance. I’m creating a key pair but you can use an existing one.</p>

<h3 id="step-2-download-kaldi-from-github">Step 2: Download Kaldi from GitHub</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/kaldi-asr/kaldi.git kaldi <span class="nt">--origin</span> upstream
<span class="nb">cd </span>kaldi
git pull
</code></pre></div></div>

<h3 id="step-3-read-the-kaldi-installation-instructions-and-follow-option-1">Step 3: Read the Kaldi installation instructions and follow Option 1</h3>

<p><a href="https://github.com/kaldi-asr/kaldi/blob/master/INSTALL">https://github.com/kaldi-asr/kaldi/blob/master/INSTALL</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nano INSTALL

This is the official Kaldi INSTALL. Look also at INSTALL.md <span class="k">for </span>the git mirror installation.
<span class="o">[</span>Option 1 <span class="k">in </span>the following does not apply to native Windows <span class="nb">install</span>, see windows/INSTALL or following Option 2]

Option 1 <span class="o">(</span>bash + makefile<span class="o">)</span>:

  Steps:
    <span class="o">(</span>1<span class="o">)</span>
    go to tools/  and follow INSTALL instructions there.

    <span class="o">(</span>2<span class="o">)</span>
    go to src/ and follow INSTALL instructions there.

Option 2 <span class="o">(</span>cmake<span class="o">)</span>:

    Go to cmake/ and follow INSTALL.md instructions there.
    Note, it may not be well tested and some features are missing currently.
</code></pre></div></div>

<h3 id="step-3-go-to-tools--and-follow-install-instructions-there">Step 3: Go to tools/  and follow INSTALL instructions there.</h3>

<p><a href="https://github.com/kaldi-asr/kaldi/blob/master/tools/INSTALL">https://github.com/kaldi-asr/kaldi/blob/master/tools/INSTALL</a></p>

<p>Check for dependencies using one of the provided lines and install anything that isn’t downloaded yet.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">CXX</span><span class="o">=</span>g++-4.8 extras/check_dependencies.sh
</code></pre></div></div>

<p>Installed the following packages but you might need more, keep checking for dependencies using the line above.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>g++ sox subversion
<span class="nb">sudo </span>apt-get <span class="nb">install </span>g++
extras/install_mkl.sh
make <span class="nt">-j</span> 8
</code></pre></div></div>

<p>When that’s done running, I saw the warning that IRSTLM is not installed, so I’m running the provided line to have it installed.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extras/install_irstlm.sh
</code></pre></div></div>

<p>If you recall the original installation steps we found, you’ll remember that when we’re done in the tools folder we should head to the source folder.</p>

<h3 id="step-4-go-to-src-and-follow-install-instructions-there">Step 4: go to src/ and follow INSTALL instructions there.</h3>

<p>[ubuntu@ip-172-31-6-113 src]$ nano INSTALL</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>src
<span class="o">[</span>ubuntu@ip-172-31-6-113 src]<span class="nv">$ </span>nano INSTALL
./configure <span class="nt">--shared</span>
make depend <span class="nt">-j</span> 8
make <span class="nt">-j</span> 8
</code></pre></div></div>

<p><strong>You’re Done!</strong></p>

<hr />

<p>Transcript for tutorial on YouTube:</p>

<p>Today we’re going to set up an AWS instance and install Kaldi on it.  First, open your AWS account and find the EC2 instances page. Click launch instance, scroll down to the “<strong>Deep Learning AMI (Ubuntu 18.04)”</strong> and select it. For Step 2, select the g4dn.2xlarge instance as it has 8 vCPUs and 1 GPU, and its 75 cents per hour, so make sure to pause the instance when you’re not using it. For Step 3, select a specific subnet. This is optional since it defaults to a random region. For Step 4, disable the “Delete on Termination” setting and change the Root’s size to 600 GB. From personal experience, 400GB isn’t going to be enough. Then, you can skip to step 7, review the instance settings, and launch the instance. I’m creating a key pair but you can use an existing one.</p>

<p>Now its time to open your terminal and login into your AWS instance. The address you’ll be ssh-ing into is ubuntu “at” your instance’s public IP address. If you’re using a new key .pem file, make sure to change its privacy settings by using the command “chmod 400” with your file name. Once you successfully ssh into your instance, it is time to install Kaldi.</p>

<p>The initial downloading steps can be found on the official Kaldi webpage. Just copy and paste the first two commands on this page into your terminal and you should be set. Next, open and read the INSTALL file in the Kaldi directory, and follow Option 1. This means you should change to the tools directory and follow the directions in the INSTALL file there. Check for dependencies using one of the provided lines and install anything that isn’t downloaded yet. There’s a bug for one dependency where even if you download it, the check dependencies command will still say its uninstalled. You can just ignore this warning if you have already installed it. Now we’re going to run make with the last option in the installation instruction, since it uses multiple CPUs. When that’s done running, I saw the warning that IRSTLM is not installed, so I’m running the provided line to have it installed.</p>

<p>If you recall the original installation steps we found, you’ll remember that when we’re done in the tools folder we should head to the source folder. Here we can open the installation file and follow the three simple commands.</p>

<p>And that was it! You’re all done installing Kaldi. Thanks for watching, and hopefully his was helpful.</p>

<p>history.txt</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    1  LS
    2  <span class="nb">ls
    </span>3  tree <span class="nt">-l</span>
    4  tree <span class="nt">-L</span>
    5  get-apt <span class="nb">install </span>tree
    6  apt-get <span class="nb">install </span>tree
    7  <span class="nb">ls
    </span>8  tree -
    9  tree <span class="nt">-L</span> 2
   10  <span class="nb">exit
   </span>11  <span class="nb">ls
   </span>12  tree <span class="nt">-L</span> 2
   13  <span class="nb">sudo </span>apt  <span class="nb">install </span>tree
   14  tree <span class="nt">-L</span> 2
   15  git clone https://github.com/kaldi-asr/kaldi.git kaldi <span class="nt">--origin</span> upstream
   16  <span class="nb">cd </span>kaldi
   17  <span class="nb">ls
   </span>18  nano INSTALL
   19  <span class="nb">cd </span>tools/
   20  nano INSTALL
   21  <span class="nv">CXX</span><span class="o">=</span>g++-4.8 extras/check_dependencies.sh
   22  <span class="nb">sudo </span>apt-get <span class="nb">install </span>g++ sox subversion
   23  <span class="nv">CXX</span><span class="o">=</span>g++-4.8 extras/check_dependencies.sh
   24  <span class="nb">sudo </span>apt-get <span class="nb">install </span>g++
   25  <span class="nv">CXX</span><span class="o">=</span>g++-4.8 extras/check_dependencies.sh
   26  extras/install_mkl.sh
   27  <span class="nv">CXX</span><span class="o">=</span>g++-4.8 extras/check_dependencies.sh
   28  nano INSTALL
   29  make <span class="nt">-j</span> 8
   30  extras/install_irstlm.sh
   31  <span class="nb">ls
   </span>32  <span class="nb">cd</span> ..
   33  <span class="nb">cd </span>src
   34  <span class="nb">ls
   </span>35  <span class="nb">cd</span> ..
   36  nano INSTALL
   37  <span class="nb">cd </span>src/
   38  <span class="nb">ls
   </span>39  nano INSTALL
   40  ./configure <span class="nt">--shared</span>
   41  nano INSTALL
   42  make depend <span class="nt">-j</span> 8
   43  nano INSTALL
   44 make <span class="nt">-j</span> 8
   45  <span class="nb">cd</span> ..
   46  tree <span class="nt">-L</span> 2
   47  tree <span class="nt">-L</span> 1
   48  tree <span class="nt">-L</span> 2
   49  <span class="nb">df</span> <span class="nt">-hT</span>
   50  lsblk
   51  <span class="nb">ls
   </span>52  <span class="nb">cd </span>egs
   53  <span class="nb">ls
   </span>54  <span class="nb">cd </span>librispeech/
   55  <span class="nb">ls
   </span>56  <span class="nb">cd </span>s5
   57  <span class="nb">ls
   </span>58  <span class="nb">sudo </span>apt <span class="nb">install </span>flac
   59  <span class="nb">ls
   </span>60  nano cmd.sh
   61  <span class="nb">ls
   </span>62  <span class="nb">cp </span>run.sh run_edited.sh
   63  <span class="nb">ls
   </span>64  nano run_edited.sh
   65  nvidia-smi
   66  nvidia-smi <span class="nt">-c</span> 3
   67  <span class="nb">sudo </span>nvidia-smi <span class="nt">-c</span> 3
   68  nano run_edited.sh
   69  nano <span class="nb">local</span>/chain/run_tdnn.sh
   70  screen <span class="nt">-S</span> libri
   71  top
   72  <span class="nb">history</span> <span class="o">&gt;</span> history.txt
</code></pre></div></div>

<!-- 
<div id="disqus_thread"></div>
<script>
/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: [https://disqus.com/admin/universalcode/#configuration-variables](https://disqus.com/admin/universalcode/#configuration-variables)    */
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = '[https://https-npovey-github-io.disqus.com/embed.js](https://https-npovey-github-io.disqus.com/embed.js)';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="[https://disqus.com/?ref_noscript](https://disqus.com/?ref_noscript)">comments powered by Disqus.</a></noscript>

 -->

<div id="disqus_thread"></div>
<script>
var disqus_config = function () {
this.page.url = "https://npovey.github.io/jekyll/update/2022/01/02/AWS-Kaldi-Installation.html"; // <--- use canonical URL
this.page.identifier = "/jekyll/update/2022/01/02/AWS-Kaldi-Installation";
};
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');

s.src = '//https-npovey-github-io.disqus.com/embed.js'; // <--- use Disqus shortname

s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Step 1: Choose an instance on AWS Step 2: Download Kaldi from GitHub Step 3: Read the Kaldi installation instructions and follow Option 1 Step 3: Go to tools/ and follow INSTALL instructions there. Step 4: go to src/ and follow INSTALL instructions there.]]></summary></entry><entry><title type="html">Install Kaldi: Red Hat</title><link href="http://localhost:4000/jekyll/update/2022/01/01/Install-Kaldi-Red-Hat.html" rel="alternate" type="text/html" title="Install Kaldi: Red Hat" /><published>2022-01-01T00:07:21-08:00</published><updated>2022-01-01T00:07:21-08:00</updated><id>http://localhost:4000/jekyll/update/2022/01/01/Install-Kaldi-Red-Hat</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/01/01/Install-Kaldi-Red-Hat.html"><![CDATA[<ul>
  <li><a href="#step1-install-git-on-aws-instance">Step1: Install git on AWS Instance</a></li>
  <li><a href="#step-2-download-kaldi-from-github">Step 2: Download Kaldi from GitHub</a></li>
  <li><a href="#step-3-read-the-kaldi-installation-instructions-and-follow-option-1">Step 3: Read the Kaldi installation instructions and follow Option 1</a></li>
  <li><a href="#step-4-go-to-tools--and-follow-install-instructions-there">Step 4: go to tools/  and follow INSTALL instructions there.</a></li>
  <li><a href="#step-5-go-to-src-and-follow-install-instructions-there">Step 5: go to src/ and follow INSTALL instructions there.</a></li>
</ul>

<p>YouTube
<a href="https://youtu.be/YR_kcw6FOd0">https://youtu.be/YR_kcw6FOd0</a>
How to Install Kaldi Red Hat| Tutorial</p>

<p>Note: I’ll be using an AWS EC2 instance for the installation but you can do this directly on a linux machine.</p>

<h3 id="step1-install-git-on-aws-instance">Step1: Install git on AWS Instance</h3>

<p>(Keep in mind that the yum install is only for red hat, for debian/ubuntu it would be apt-get install.)</p>

<p><a href="https://cloudaffaire.com/how-to-install-git-in-aws-ec2-instance/">https://cloudaffaire.com/how-to-install-git-in-aws-ec2-instance/</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum update <span class="nt">-y</span>
<span class="nb">sudo </span>yum <span class="nb">install </span>git <span class="nt">-y</span>
</code></pre></div></div>

<h3 id="step-2-download-kaldi-from-github">Step 2: Download Kaldi from GitHub</h3>

<p><a href="https://kaldi-asr.org/doc/install.html">https://kaldi-asr.org/doc/install.html</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/kaldi-asr/kaldi.git kaldi <span class="nt">--origin</span> upstream
<span class="nb">cd </span>kaldi
git pull
</code></pre></div></div>

<h3 id="step-3-read-the-kaldi-installation-instructions-and-follow-option-1">Step 3: Read the Kaldi installation instructions and follow Option 1</h3>

<p><a href="https://github.com/kaldi-asr/kaldi/blob/master/INSTALL">https://github.com/kaldi-asr/kaldi/blob/master/INSTALL</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>ec2-user@ip-172-31-6-113 kaldi]<span class="nv">$ </span>nano INSTALL

This is the official Kaldi INSTALL. Look also at INSTALL.md <span class="k">for </span>the git mirror installation.
<span class="o">[</span>Option 1 <span class="k">in </span>the following does not apply to native Windows <span class="nb">install</span>, see windows/INSTALL or following Option 2]

Option 1 <span class="o">(</span>bash + makefile<span class="o">)</span>:

  Steps:
    <span class="o">(</span>1<span class="o">)</span>
    go to tools/  and follow INSTALL instructions there.

    <span class="o">(</span>2<span class="o">)</span>
    go to src/ and follow INSTALL instructions there.

Option 2 <span class="o">(</span>cmake<span class="o">)</span>:

    Go to cmake/ and follow INSTALL.md instructions there.
    Note, it may not be well tested and some features are missing currently.
</code></pre></div></div>

<h3 id="step-4-go-to-tools--and-follow-install-instructions-there">Step 4: go to tools/  and follow INSTALL instructions there.</h3>

<p><a href="https://github.com/kaldi-asr/kaldi/blob/master/tools/INSTALL">https://github.com/kaldi-asr/kaldi/blob/master/tools/INSTALL</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>tools
<span class="o">[</span>ec2-user@ip-172-31-6-113 tools]<span class="nv">$ </span>nano INSTALL
</code></pre></div></div>

<p>Check for dependencies and install missing items</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>ec2-user@ip-172-31-6-113 tools]<span class="nv">$ </span>./extras/check_dependencies.sh
<span class="o">[</span>ec2-user@ip-172-31-6-113 tools]<span class="nv">$ </span><span class="nb">sudo </span>yum <span class="nb">install </span>gcc-c++ automake autoconf patch sox gcc-gfortran libtool subversion
</code></pre></div></div>

<p>Check for dependencies and install missing items</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>ec2-user@ip-172-31-6-113 tools]<span class="nv">$ </span>./extras/check_dependencies.sh
<span class="o">[</span>ec2-user@ip-172-31-6-113 tools]<span class="nv">$ </span><span class="nb">sudo </span>yum <span class="nb">install </span>zlib-devel
</code></pre></div></div>

<p>Check for dependencies and install missing items</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>ec2-user@ip-172-31-6-113 tools]<span class="nv">$ </span>./extras/check_dependencies.sh
./extras/check_dependencies.sh: Intel MKL does not seem to be installed.
 ... Run extras/install_mkl.sh to <span class="nb">install </span>it. Some distros <span class="o">(</span>e.g., Ubuntu 20.04<span class="o">)</span> provide
 ... a version of MKL via the package manager, but verify that it is up-to-date.
 ... You can also use other matrix algebra libraries. For information, see:
 ...   http://kaldi-asr.org/doc/matrixwrap.html
<span class="o">[</span>ec2-user@ip-172-31-6-113 tools]<span class="err">$</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">make</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>ec2-user@ip-172-31-6-113 tools]<span class="nv">$ </span>./extras/install_mkl.sh
<span class="o">[</span>ec2-user@ip-172-31-6-113 tools]<span class="nv">$ </span>make
</code></pre></div></div>

<p>Install IRSTLM: can be useful for  interpolations when building LMs</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">***</span><span class="o">()</span> Installation of IRSTLM finished successfully
<span class="k">***</span><span class="o">()</span> Please <span class="nb">source </span>the tools/env.sh <span class="k">in </span>your path.sh to <span class="nb">enable </span>it
<span class="o">[</span>ec2-user@ip-172-31-6-113 tools]<span class="err">$</span>
</code></pre></div></div>

<h3 id="step-5-go-to-src-and-follow-install-instructions-there">Step 5: go to src/ and follow INSTALL instructions there.</h3>

<p>[ec2-user@ip-172-31-6-113 src]$ nano INSTALL</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>src
<span class="o">[</span>ec2-user@ip-172-31-6-113 src]<span class="nv">$ </span>nano INSTALL
./configure <span class="nt">--shared</span>
make depend <span class="nt">-j</span> 8
make <span class="nt">-j</span> 8
</code></pre></div></div>

<p><strong>You’re Done!</strong></p>

<p>history.txt</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1  <span class="nb">sudo </span>yum update <span class="nt">-y</span>
2  <span class="nb">sudo </span>yum <span class="nb">install </span>git <span class="nt">-y</span>
3  git clone https://github.com/kaldi-asr/kaldi.git kaldi <span class="nt">--origin</span> upstream
4  <span class="nb">cd </span>kaldi
5  git pull
6  nano INSTALL
7  <span class="nb">cd </span>tools/
8  nano INSTALL
9  ./extras/check_dependencies.sh
10  <span class="nb">sudo </span>yum <span class="nb">install </span>gcc-c++ automake autoconf patch sox gcc-gfortran libtool subversion
11  ./extras/check_dependencies.sh
12  <span class="nb">sudo </span>yum <span class="nb">install </span>zlib-devel
13  ./extras/check_dependencies.sh
14  ./extras/install_mkl.sh
15  ./extras/check_dependencies.sh
16  make <span class="nt">-j</span> 8
17  ./extras/install_irstlm.sh
18  <span class="nb">cd </span>src/
19  ./configure <span class="nt">--shared</span>
20  make depend <span class="nt">-j</span> 8
21  make <span class="nt">-j</span> 8
</code></pre></div></div>

<p>Kaldi directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu@ip-172-31-6-144:~/kaldi<span class="nv">$ </span>tree <span class="nt">-L</span> 2
<span class="nb">.</span>
├── CMakeLists.txt
├── COPYING
├── INSTALL
├── README.md
├── cmake
│   ├── FindBLAS.cmake
│   ├── FindCUB.cmake
│   ├── FindICU.cmake
│   ├── FindLAPACK.cmake
│   ├── FindNvToolExt.cmake
│   ├── INSTALL.md
│   ├── Utils.cmake
│   ├── VersionHelper.cmake
│   ├── gen_cmake_skeleton.py
│   ├── kaldi-config.cmake.in
│   └── third_party
├── docker
│   ├── README.md
│   ├── debian10-cpu
│   ├── debian9.8-cpu
│   ├── ubuntu16.04-gpu
│   └── ubuntu18.04-cuda10.0
├── egs
│   ├── README.txt
│   ├── aidatatang_200zh
│   ├── aishell
│   ├── aishell2
│   ├── ami
│   ├── an4
│   ├── apiai_decode
│   ├── aspire
│   ├── aurora4
│   ├── babel
│   ├── babel_multilang
│   ├── bentham
│   ├── bn_music_speech
│   ├── callhome_diarization
│   ├── callhome_egyptian
│   ├── casia_hwdb
│   ├── chime1
│   ├── chime2
│   ├── chime3
│   ├── chime4
│   ├── chime5
│   ├── chime6
│   ├── cifar
│   ├── cmu_cslu_kids
│   ├── cnceleb
│   ├── commonvoice
│   ├── csj
│   ├── dihard_2018
│   ├── fame
│   ├── farsdat
│   ├── fisher_callhome_spanish
│   ├── fisher_english
│   ├── fisher_swbd
│   ├── formosa
│   ├── gale_arabic
│   ├── gale_mandarin
│   ├── gigaspeech
│   ├── gop_speechocean762
│   ├── gp
│   ├── heroico
│   ├── hi_mia
│   ├── hkust
│   ├── hub4_english
│   ├── hub4_spanish
│   ├── iam
│   ├── iban
│   ├── icsi
│   ├── ifnenit
│   ├── libri_css
│   ├── librispeech
│   ├── lre
│   ├── lre07
│   ├── madcat_ar
│   ├── madcat_zh
│   ├── malach
│   ├── mandarin_bn_bc
│   ├── material
│   ├── mgb2_arabic
│   ├── mgb5
│   ├── mini_librispeech
│   ├── mobvoi
│   ├── mobvoihotwords
│   ├── multi_cn
│   ├── multi_en
│   ├── nsc
│   ├── opensat20
│   ├── ptb
│   ├── reverb
│   ├── rimes
│   ├── <span class="nb">rm</span>
│   ├── sad_rats
│   ├── sitw
│   ├── snips
│   ├── spanish_dimex100
│   ├── sprakbanken
│   ├── sprakbanken_swe
│   ├── sre08
│   ├── sre10
│   ├── sre16
│   ├── svhn
│   ├── swahili
│   ├── swbd
│   ├── tedlium
│   ├── thchs30
│   ├── tidigits
│   ├── timit
│   ├── tunisian_msa
│   ├── uw3
│   ├── voxceleb
│   ├── voxforge
│   ├── vystadial_cz
│   ├── vystadial_en
│   ├── wenetspeech
│   ├── wsj
│   ├── yesno
│   ├── yomdle_fa
│   ├── yomdle_korean
│   ├── yomdle_russian
│   ├── yomdle_tamil
│   ├── yomdle_zh
│   └── zeroth_korean
├── misc
│   ├── README.txt
│   ├── htk_conversion
│   ├── htk_decode_example
│   ├── htk_graph_creation_example
│   ├── logo
│   ├── maintenance
│   └── papers
├── scripts
│   ├── rnnlm
│   └── wakeword
├── src
│   ├── Doxyfile
│   ├── INSTALL
│   ├── Makefile
│   ├── NOTES
│   ├── TODO
│   ├── base
│   ├── bin
│   ├── chain
│   ├── chainbin
│   ├── configure
│   ├── cudadecoder
│   ├── cudadecoderbin
│   ├── cudafeat
│   ├── cudafeatbin
│   ├── cudamatrix
│   ├── decoder
│   ├── doc
│   ├── feat
│   ├── featbin
│   ├── fgmmbin
│   ├── fstbin
│   ├── fstext
│   ├── gmm
│   ├── gmmbin
│   ├── gst-plugin
│   ├── hmm
│   ├── itf
│   ├── ivector
│   ├── ivectorbin
│   ├── kaldi.mk
│   ├── kws
│   ├── kwsbin
│   ├── lat
│   ├── latbin
│   ├── lib
│   ├── lm
│   ├── lmbin
│   ├── makefiles
│   ├── matrix
│   ├── nnet
│   ├── nnet2
│   ├── nnet2bin
│   ├── nnet3
│   ├── nnet3bin
│   ├── nnetbin
│   ├── online
│   ├── online2
│   ├── online2bin
│   ├── onlinebin
│   ├── probe
│   ├── rnnlm
│   ├── rnnlmbin
│   ├── sgmm2
│   ├── sgmm2bin
│   ├── tfrnnlm
│   ├── tfrnnlmbin
│   ├── transform
│   ├── tree
│   └── util
├── tools
│   ├── ATLAS_headers
│   ├── CLAPACK
│   ├── INSTALL
│   ├── Makefile
│   ├── config
│   ├── cub -&gt; cub-1.8.0
│   ├── cub-1.8.0
│   ├── cub-1.8.0.tar.gz
│   ├── env.sh
│   ├── extras
│   ├── install_pfile_utils.sh -&gt; extras/install_pfile_utils.sh
│   ├── install_portaudio.sh -&gt; extras/install_portaudio.sh
│   ├── install_speex.sh -&gt; extras/install_speex.sh
│   ├── install_srilm.sh -&gt; extras/install_srilm.sh
│   ├── irstlm
│   ├── openfst -&gt; openfst-1.7.2
│   ├── openfst-1.7.2
│   ├── openfst-1.7.2.tar.gz
│   ├── sctk -&gt; sctk-20159b5
│   ├── sctk-20159b5
│   ├── sctk-20159b5.tar.gz
│   ├── sph2pipe -&gt; sph2pipe_v2.5
│   ├── sph2pipe-2.5.tar.gz
│   └── sph2pipe_v2.5
└── windows
    ├── INSTALL.atlas
    ├── INSTALL.md
    ├── INSTALL.mkl
    ├── NewGuidCmd.exe
    ├── NewGuidCmd.exe.config
    ├── cuda_7.0.props
    ├── generate_solution.pl
    ├── get_version.pl
    ├── kaldiwin_atlas.props
    ├── kaldiwin_mkl.props
    ├── kaldiwin_openblas.props
    ├── kaldiwin_win32.props
    ├── openfstwin_debug.props
    ├── openfstwin_debug_win32.props
    ├── openfstwin_release.props
    ├── openfstwin_release_win32.props
    ├── portaudio.props
    ├── portaudio_debug.props
    ├── portaudio_release.props
    └── variables.props.dev

186 directories, 55 files
ubuntu@ip-172-31-6-144:~/kaldi<span class="err">$</span>
</code></pre></div></div>

<!-- 
<div id="disqus_thread"></div>
<script>
/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: [https://disqus.com/admin/universalcode/#configuration-variables](https://disqus.com/admin/universalcode/#configuration-variables)    */
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = '[https://https-npovey-github-io.disqus.com/embed.js](https://https-npovey-github-io.disqus.com/embed.js)';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="[https://disqus.com/?ref_noscript](https://disqus.com/?ref_noscript)">comments powered by Disqus.</a></noscript>

 -->

<div id="disqus_thread"></div>
<script>
var disqus_config = function () {
this.page.url = "https://npovey.github.io/jekyll/update/2022/01/01/Install-Kaldi-Red-Hat.html"; // <--- use canonical URL
this.page.identifier = "/jekyll/update/2022/01/01/Install-Kaldi-Red-Hat";
};
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');

s.src = '//https-npovey-github-io.disqus.com/embed.js'; // <--- use Disqus shortname

s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Step1: Install git on AWS Instance Step 2: Download Kaldi from GitHub Step 3: Read the Kaldi installation instructions and follow Option 1 Step 4: go to tools/ and follow INSTALL instructions there. Step 5: go to src/ and follow INSTALL instructions there.]]></summary></entry><entry><title type="html">Kaldi: Uniform Segmentation</title><link href="http://localhost:4000/update/2020/09/10/kaldi-segmentation.html" rel="alternate" type="text/html" title="Kaldi: Uniform Segmentation" /><published>2020-09-10T14:34:33-07:00</published><updated>2020-09-10T14:34:33-07:00</updated><id>http://localhost:4000/update/2020/09/10/kaldi-segmentation</id><content type="html" xml:base="http://localhost:4000/update/2020/09/10/kaldi-segmentation.html"><![CDATA[<p><img src="/2020-09-10-segmentation/uniform_segmentation.png" alt="jpeg" /></p>

<p><strong>Goal</strong></p>

<p>When decoding with pre-trained Aspire model I noticed that the audio with background noise gave us high error rate. When I looked at decoded text many words simply where missing. It was shown before that uniform segmentation can improve decoding results on long audio files that were decoded with Aspire model. I wanted to test that observation on our audio files, as our audio files are around 1 hour long.</p>

<p><strong>Training data/test data/ pre-tained model</strong></p>

<p>For testing I used captions from approximately 30K youtube videos [57,592,182 words]. I noticed that the text has approximately 200K duplicate lines.</p>

<p><strong>Expected outcome</strong></p>

<p>I am expecting to see some improvements in decoded text.</p>

<p><strong>Results</strong></p>

<p>I tested only on a single file that was 1 hour long. The file has very loud music in the background in the beginning and at the end of the recording. I observed ~7 point improvement in the final results.</p>

<p><em>What I Learned: Even when the model is trained with background noise it still can have a hard time with decoding audios with background noise and segmentation helps on long audio files.</em></p>

<p>KALDI: Notes on decoding with uniform segmentation:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. <span class="c"># create by hand utt2spk</span>

2. <span class="c"># create spk2utt file</span>
utils/utt2spk_to_spk2utt.pl utt2spk <span class="o">&gt;</span> spk2utt

3. <span class="c"># create text and wav.scp</span>

4. <span class="c"># get segments</span>
utils/data/get_segments_for_data.sh  data/test <span class="o">&gt;</span> data/test/segments

5. <span class="c"># copy text into a new folder</span>
<span class="nb">cp test</span>/text test_segmented

6.
utils/data/get_uniform_subsegments.py <span class="nt">--max-segment-duration</span><span class="o">=</span>30 <span class="nt">--overlap-duration</span><span class="o">=</span>5 <span class="nt">--max-remaining-duration</span><span class="o">=</span>15 data/test/segments <span class="o">&gt;</span> data/test/uniform_sub_segments

7. <span class="c"># create features</span>
steps/make_mfcc.sh <span class="nt">--nj</span> 1 <span class="nt">--mfcc-config</span> conf/mfcc_hires.conf data/test

8.
utils/data/subsegment_data_dir.sh data/test/ data/test/uniform_sub_segments data/test_segmented

9. <span class="c"># assumes one has a language model and graph</span>
<span class="c"># https://npovey.github.io/update/2020/09/08/kaldi-basic-decoding.html</span>

10. <span class="c"># decode</span>
steps/online/nnet3/decode.sh <span class="nt">--cmd</span> utils/run.pl <span class="nt">--nj</span> 1 <span class="nt">--acwt</span> 1.0 <span class="nt">--post-decode-acwt</span> 10.0 exp/tdnn_7b_chain_online/graph_pp data/test_segmented exp/tdnn_7b_chain_online/decode_test


11. <span class="c"># splices the broken-up pieces together</span>
<span class="c"># --frame-shift 0.01 or --frame-shift 0.03 all producing the same results</span>
steps/get_ctm_fast.sh <span class="nt">--cmd</span> utils/run.pl <span class="nt">--frame-shift</span> 0.01 data/test_segmented exp/tdnn_7b_chain_online/graph_pp exp/tdnn_7b_chain_online/decode_test exp/tdnn_7b_chain_online/decode_test/score_10_0.0

12. <span class="c"># create "reco2file_and_channel" file</span>
<span class="nb">touch </span>reco2file_and_channel
pico reco2file_and_channel
<span class="c"># 13 13 0</span>

13. <span class="c"># concatenates the pieces of text and resolves bits that overlap in time...</span>
utils/ctm/resolve_ctm_overlaps.py data/test_segmented/segments exp/tdnn_7b_chain_online/decode_test/score_10_0.0/ctm - | utils/convert_ctm.pl
data/test_segmented/segments data/test_segmented/reco2file_and_channel <span class="o">&gt;</span> exp/tdnn_7b_chain_online/decode_test/score_10_0.0/no_segments.ctm


14. <span class="c"># don't remember but this shouldn't work</span>
<span class="c">#local/score.sh --cmd utils/run.pl data/test_segmented exp/tdnn_7b_chain_online/graph_pp exp/tdnn_7b_chain_online/decode_test</span>

15. <span class="c"># write a script to convert ctm-&gt;text</span>
<span class="nb">cat </span>no_segments.ctm | <span class="nb">awk</span> <span class="s1">'{$1 = ""; $2 = ""; $3 = ""; $4 = ""; print $0}'</span> <span class="o">&gt;</span> z.txt
<span class="nb">cat </span>z.txt | <span class="nb">tr</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">" "</span> <span class="o">&gt;</span> z2.txt

16. <span class="c">#score</span>
<span class="c"># You must slightly edit "z2.txt" to match the data/text</span>
<span class="c"># remove word test at the top and add the matching file name as in data/text</span>
<span class="nb">.</span> ./path.sh
compute-wer <span class="nt">--text</span> <span class="nt">--mode</span><span class="o">=</span>present ark:data/test/text ark:exp/tdnn_7b_chain_online/decode_test/score_10_0.0/z2.txt
<span class="c">#%WER 35.51 [ 3060 / 8617, 391 ins, 1030 del, 1639 sub ]</span>

<span class="c">#or</span>
compute-wer-bootci <span class="nt">--mode</span><span class="o">=</span>present ark:data/test/text ark:exp/tdnn_7b_chain_online/decode_test/score_10_0.0/z5.txt

17. <span class="c"># pipe through hyp_filter to remove "unk"</span>
./wer_hyp_filter &lt; exp/tdnn_7b_chain_online/decode_test/score_10_0.0/z2.txt <span class="o">&gt;</span> removed_unk.txt


18. score again
compute-wer <span class="nt">--text</span> <span class="nt">--mode</span><span class="o">=</span>present ark:data/test/text ark:exp/tdnn_7b_chain_online/decode_test/score_10_0.0/removed_unk.txt
<span class="c">#%WER 35.27 [ 3039 / 8617, 364 ins, 1116 del, 1559 sub ]</span>
<span class="c">#%SER 100.00 [ 1 / 1 ]</span>
<span class="c">#Scored 1 sentences, 0 not present in hyp.</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="update" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Kaldi: Interpolate Using SRILM</title><link href="http://localhost:4000/update/2020/09/09/kaldi-interpolate-using-srilm.html" rel="alternate" type="text/html" title="Kaldi: Interpolate Using SRILM" /><published>2020-09-09T14:34:33-07:00</published><updated>2020-09-09T14:34:33-07:00</updated><id>http://localhost:4000/update/2020/09/09/kaldi-interpolate-using-srilm</id><content type="html" xml:base="http://localhost:4000/update/2020/09/09/kaldi-interpolate-using-srilm.html"><![CDATA[<p><img src="/2020-09-09-interpolate-srilm/kaldi_interpolate.jpg" alt="jpeg" /></p>

<p>KALDI speech processing interpolation example. Read up on ngram here  http://www.speech.sri.com/projects/srilm/</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
1. <span class="c"># ngram path added to the path</span>
<span class="nb">.</span> ./path.sh

2. <span class="c"># make directory to put the interpolated arpa file</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> data/srilm_interp

3. <span class="c"># interpolate from 2 LMs, can try different lambda values for interpolation</span>
ngram <span class="nt">-lm</span> data/local/lm_26_98/3gram-mincount/lm_unpruned.gz  <span class="nt">-mix-lm</span> data/local/lm_29_29/3gram-mincount/lm_unpruned.gz <span class="nt">-lambda</span> 0.5 <span class="nt">-write-lm</span> data/srilm_interp/lm.0.5.gz

4. <span class="c"># convert new LM to G.fst and put it in lang_test</span>
utils/format_lm.sh data/lang data/srilm_interp/lm.0.5.gz data/local/dict/lexicon.txt data/lang_test

5. <span class="c"># build graph ~1hour 1pm</span>
utils/mkgraph.sh <span class="nt">--self-loop-scale</span> 1.0 data/lang_test exp/tdnn_7b_chain_online exp/tdnn_7b_chain_online/graph_pp

6. <span class="c"># decode ~5hours</span>

7. <span class="c"># get results</span>
<span class="nb">grep </span>WER  exp/tdnn_7b_chain_online/decode_test/wer_<span class="k">*</span> | utils/best_wer.sh

8. <span class="c"># see results</span>
less exp/tdnn_7b_chain_online/decode_test/log/decode.<span class="k">*</span>.log
</code></pre></div></div>

<p>Step 6: Decode</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span> ./path.sh
<span class="nb">.</span> ./cmd.sh
<span class="c"># allow down sampling</span>
<span class="nb">echo</span> <span class="s2">"--allow-downsample=true"</span> <span class="o">&gt;&gt;</span> conf/mfcc_hires.conf
<span class="c"># create features (not sure if this step is needed for interpolation)</span>
steps/make_mfcc.sh <span class="nt">--mfcc-config</span> conf/mfcc_hires.conf data/test
<span class="c"># decode, 5 cpus used but can increase number of cpus</span>
steps/online/nnet3/decode.sh <span class="nt">--cmd</span> utils/run.pl <span class="nt">--nj</span> 5 <span class="nt">--acwt</span> 1.0 <span class="nt">--post-decode-acwt</span> 10.0 exp/tdnn_7b_chain_online/graph_pp data/test exp/tdnn_7b_chain_online/decode_test
</code></pre></div></div>

<p>Results</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LM1 WER <span class="o">=</span> 26.98
LM2 WER <span class="o">=</span> 29.29
LM3 <span class="o">[</span>Interpolated model] WER <span class="o">=</span> 27.12
</code></pre></div></div>]]></content><author><name></name></author><category term="update" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Kaldi: Decoding with Pre-trained Aspire Model</title><link href="http://localhost:4000/update/2020/09/08/kaldi-basic-decoding.html" rel="alternate" type="text/html" title="Kaldi: Decoding with Pre-trained Aspire Model" /><published>2020-09-08T14:34:33-07:00</published><updated>2020-09-08T14:34:33-07:00</updated><id>http://localhost:4000/update/2020/09/08/kaldi-basic-decoding</id><content type="html" xml:base="http://localhost:4000/update/2020/09/08/kaldi-basic-decoding.html"><![CDATA[<p><img src="/2020-09-08-basic-kaldi-decoding/basic_kaldi_decoding.png" alt="basic" /></p>

<h1 id="table-of-contents">Table of Contents</h1>

<ol>
  <li><a href="#e1">Basic decoding steps</a></li>
  <li><a href="#e2">Decode</a></li>
  <li><a href="#e3">Results 1</a></li>
  <li><a href="#e4">Remove &lt;unk&gt; and rescore again</a></li>
  <li><a href="#e5">Results 2</a></li>
  <li><a href="#e6">Note: score.sh -&gt; ../steps/score_kaldi.sh</a></li>
</ol>

<p><strong>Basic decoding steps</strong> <a name="e1"></a></p>

<p>The example is about decoding. Didn’t train model. For trained models check kaldi website.
<a href="http://kaldi-asr.org/models.html">http://kaldi-asr.org/models.html</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0. <span class="c"># create text file</span>
<span class="c"># text must be put inside train_all folder [4.4M lines of text]</span>
<span class="c"># i would recommend to find text sample closer to the decoding audio</span>
<span class="c"># important to add foo to the begining of each line. adding foo only works for decoding</span>
<span class="c"># for training the procedure will be different</span>
<span class="nb">awk</span> <span class="s1">'{print "foo", $0}'</span> &lt; output_31600.txt <span class="o">&gt;</span> text

1. <span class="c"># prepare_dictionary</span>
<span class="nb">local</span>/fisher_prepare_dict.sh

2. <span class="c"># preapare lang</span>
utils/prepare_lang.sh data/local/dict <span class="s2">"&lt;unk&gt;"</span> data/local/lang data/lang

3. <span class="c"># train 20m</span>
<span class="nb">local</span>/fisher_train_lms.sh

4. <span class="c"># This script formats ARPA LM into G.fst. ~15 min</span>
<span class="nb">local</span>/fisher_create_test_lang.sh

5. <span class="c"># build graph ~1hour 1pm</span>
utils/mkgraph.sh <span class="nt">--self-loop-scale</span> 1.0 data/lang_test exp/tdnn_7b_chain_online exp/tdnn_7b_chain_online/graph_pp

6. <span class="c"># decode see below</span>

7. <span class="c"># get results</span>
<span class="nb">grep </span>WER  exp/tdnn_7b_chain_online/decode_test/wer_<span class="k">*</span> | utils/best_wer.sh

8. <span class="c"># see results</span>
less exp/tdnn_7b_chain_online/decode_test/log/decode.<span class="k">*</span>.log

</code></pre></div></div>

<p><strong>Decode</strong>  <a name="e2"></a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span> ./path.sh
<span class="nb">.</span> ./cmd.sh
<span class="c"># allow down sampling</span>
<span class="nb">echo</span> <span class="s2">"--allow-downsample=true"</span> <span class="o">&gt;&gt;</span> conf/mfcc_hires.conf
<span class="c"># create features</span>
steps/make_mfcc.sh <span class="nt">--mfcc-config</span> conf/mfcc_hires.conf data/test
<span class="c"># decode, 5 cpus used but can increase number of cpus</span>
steps/online/nnet3/decode.sh <span class="nt">--cmd</span> utils/run.pl <span class="nt">--nj</span> 5 <span class="nt">--acwt</span> 1.0 <span class="nt">--post-decode-acwt</span> 10.0 exp/tdnn_7b_chain_online/graph_pp data/test exp/tdnn_7b_chain_online/decode_test
</code></pre></div></div>

<p><strong>Results 1</strong>  <a name="e3"></a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%WER 26.72 <span class="o">[</span> 55196 / 206597, 6730 ins, 18273 del, 30193 sub <span class="o">]</span>
</code></pre></div></div>

<p><strong>Remove &lt;unk&gt; and rescore again</strong> <a name="e4"></a></p>

<p>Goal: remove  &lt;unk&gt; from decoded test before scoring</p>

<blockquote>

  <p>TODO:
strip out the &lt;unk&gt; by setting up the file local/wer_filter (or better, local/wer_hyp_filter, it will just filter the hypothesis).  check score_kaldi.sh for what it accepts.  Should be a shell script, executable (chmod +x…), and will probably have a sed or perl command inside it, like: sed ‘s/&lt;unk&gt;//g;’</p>
</blockquote>

<p>Create a “local/wer_hyp_filter” / “wer_hyp_filter.sh” would not work</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sed</span> <span class="s1">'s/&lt;unk&gt;//g;'</span>
</code></pre></div></div>

<p>Run score script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">local</span>/score.sh <span class="nt">--cmd</span> utils/run.pl data/test exp/tdnn_7b_chain_online/graph_pp exp/tdnn_7b_chain_online/decode_test
</code></pre></div></div>

<p><strong>Results 2</strong>  <a name="e5"></a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%WER 26.54 <span class="o">[</span> 54823 / 206597, 6371 ins, 19471 del, 28981 sub <span class="o">]</span>
</code></pre></div></div>

<p>As expected scoring improved very slightly</p>

<p><strong>Note</strong> <a name="e6"></a></p>

<p>My scoring script score.sh points to score_kaldi.sh. Always use score_kaldi.sh as a scoring script, as it gives lots of ways to troubleshoot the problem and improve on decoding.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>score.sh -&gt; ../steps/score_kaldi.sh
</code></pre></div></div>]]></content><author><name></name></author><category term="update" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">DD-Net: Combination of DenseNet and Deconvolution (linux)</title><link href="http://localhost:4000/update/2020/04/01/DD_Net-linux.html" rel="alternate" type="text/html" title="DD-Net: Combination of DenseNet and Deconvolution (linux)" /><published>2020-04-01T14:34:33-07:00</published><updated>2020-04-01T14:34:33-07:00</updated><id>http://localhost:4000/update/2020/04/01/DD_Net-linux</id><content type="html" xml:base="http://localhost:4000/update/2020/04/01/DD_Net-linux.html"><![CDATA[<h1 id="densenet-and-deconvolution-linux">DenseNet and Deconvolution (linux)</h1>

<p>DD-Net always peformed similar to UNet and DnCNN. The training time was the longest out of other 2 models. It took aprox. 24 hours to train the network.</p>

<p>my implementation  <a href="https://github.com/npovey/DD-Net">https://github.com/npovey/DD-Net</a></p>

<p>paper: <a href="https://ieeexplore.ieee.org/document/8331861">https://ieeexplore.ieee.org/document/8331861</a></p>

<p>original paper github: <a href="https://github.com/zzc623/DD_Net">https://github.com/zzc623/DD_Net</a></p>

<p>Authors write “The DD-Net was trained by the Adam algorithm [54].
The learning rate was initially set at 10−4 and slowly decreased
continuously down to 10−5. The size of mini-batch was 5. DD-
Net was implemented using Tensorflow [55] on a personal
workstation with Intel Core i5-7400 CPU and 16GB RAM.
A GPU card (Nvidia GTX Titan X) accelerated the training
process. All the convolution and deconvolution filters were
initialized with random Gaussian distributions with zero mean
and 0.01 standard deviation.”</p>

<p><img src="/2020-04-01-DD-Net-linux/ddnet_paper.png" alt="ddnet_paper" /></p>

<p><strong>Results</strong></p>

<p>The average PSNR and SSIM values over 354 test images are displayed in the table below.</p>

<p>Learning rate 10^-4</p>

<p>40 epochs</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Low Dose Image</th>
      <th style="text-align: left">UNet</th>
      <th>DnCNN</th>
      <th style="text-align: center">DDNet</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">sparseview_60</td>
      <td style="text-align: left"><strong>Avg PSNR: 33.28	                        Avg SSIM: 0.8858</strong></td>
      <td>Avg PSNR: 32.30               Avg SSIM: 0.8560</td>
      <td style="text-align: center">Avg PSNR: 32.96	Avg SSIM: 0.8797</td>
    </tr>
    <tr>
      <td style="text-align: left">sparseview_90</td>
      <td style="text-align: left"><strong>Avg PSNR: 35.42	                     Avg SSIM: 0.9038</strong></td>
      <td>Avg PSNR: 35.13               Avg SSIM: 0.8892</td>
      <td style="text-align: center">Avg PSNR: 35.29	Avg SSIM: 0.9011</td>
    </tr>
    <tr>
      <td style="text-align: left">sparseview_180</td>
      <td style="text-align: left">Avg PSNR: 39.48	                    Avg SSIM: 0.9319</td>
      <td><strong>Avg PSNR: 39.77               Avg SSIM: 0.9341</strong></td>
      <td style="text-align: center">Avg PSNR: 39.55	Avg SSIM: 0.9322</td>
    </tr>
    <tr>
      <td style="text-align: left">ldct_7e4</td>
      <td style="text-align: left">Avg PSNR: 41.78	                     Avg SSIM: 0.9429</td>
      <td><strong>Avg PSNR: 42.00	            Avg SSIM: 0.9444</strong></td>
      <td style="text-align: center">Avg PSNR: 41.84	Avg SSIM: 0.9431</td>
    </tr>
    <tr>
      <td style="text-align: left">ldct_1e5</td>
      <td style="text-align: left">Avg PSNR: 42.11	                    Avg SSIM: 0.9441</td>
      <td><strong>Avg PSNR: 42.32	            Avg SSIM: 0.9456</strong></td>
      <td style="text-align: center">Avg PSNR: 42.23	Avg SSIM: 0.9448</td>
    </tr>
    <tr>
      <td style="text-align: left">ldct_2e5</td>
      <td style="text-align: left">Avg PSNR: 42.69	                     Avg SSIM: 0.9466</td>
      <td><strong>Avg PSNR: 42.87	            Avg SSIM: 0.9477</strong></td>
      <td style="text-align: center">Avg PSNR: 42.77	Avg SSIM: 0.9471</td>
    </tr>
  </tbody>
</table>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def denseblock<span class="o">(</span>input<span class="o">)</span>:
  <span class="c"># - L1</span>
  num_filters <span class="o">=</span> 16
  d2_1 <span class="o">=</span> BatchNormalization<span class="o">()(</span>input<span class="o">)</span>
  d2_1 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>d2_1<span class="o">)</span>
  d2_1 <span class="o">=</span> Conv2D<span class="o">(</span>num_filters<span class="k">*</span>4, <span class="o">(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">use_bias</span><span class="o">=</span>True, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))(</span>d2_1<span class="o">)</span>

  d2_1 <span class="o">=</span> BatchNormalization<span class="o">()(</span>d2_1<span class="o">)</span>
  d2_1 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>d2_1<span class="o">)</span>
  d2_1 <span class="o">=</span> Conv2D<span class="o">(</span>num_filters, <span class="o">(</span>5, 5<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">use_bias</span><span class="o">=</span>True, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))(</span>d2_1<span class="o">)</span>

  d2_1 <span class="o">=</span> concatenate<span class="o">([</span>input, d2_1]<span class="o">)</span>

  <span class="c"># - L2</span>
  d2_2 <span class="o">=</span> BatchNormalization<span class="o">()(</span>d2_1<span class="o">)</span>
  d2_2 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>d2_2<span class="o">)</span>
  d2_2 <span class="o">=</span> Conv2D<span class="o">(</span>num_filters<span class="k">*</span>4, <span class="o">(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">use_bias</span><span class="o">=</span>True, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))(</span>d2_2<span class="o">)</span>

  d2_2 <span class="o">=</span> BatchNormalization<span class="o">()(</span>d2_2<span class="o">)</span>
  d2_2 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>d2_2<span class="o">)</span>
  d2_2 <span class="o">=</span> Conv2D<span class="o">(</span>num_filters, <span class="o">(</span>5, 5<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">use_bias</span><span class="o">=</span>True, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))(</span>d2_2<span class="o">)</span>

  d2_2 <span class="o">=</span> concatenate<span class="o">([</span>input, d2_1, d2_2]<span class="o">)</span>

  <span class="c"># - L3</span>
  d2_3 <span class="o">=</span> BatchNormalization<span class="o">()(</span>d2_2<span class="o">)</span>
  d2_3 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>d2_3<span class="o">)</span>
  d2_3 <span class="o">=</span> Conv2D<span class="o">(</span>num_filters<span class="k">*</span>4, <span class="o">(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">use_bias</span><span class="o">=</span>True, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))(</span>d2_3<span class="o">)</span>

  d2_3 <span class="o">=</span> BatchNormalization<span class="o">()(</span>d2_3<span class="o">)</span>
  d2_3 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>d2_3<span class="o">)</span>
  d2_3 <span class="o">=</span> Conv2D<span class="o">(</span>num_filters, <span class="o">(</span>5, 5<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">use_bias</span><span class="o">=</span>True, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))(</span>d2_3<span class="o">)</span>

  d2_3 <span class="o">=</span> concatenate<span class="o">([</span>input, d2_1, d2_2, d2_3]<span class="o">)</span>

  <span class="c"># - L4</span>
  d2_4 <span class="o">=</span> BatchNormalization<span class="o">()(</span>d2_3<span class="o">)</span>
  d2_4 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>d2_4<span class="o">)</span>
  d2_4 <span class="o">=</span> Conv2D<span class="o">(</span>num_filters<span class="k">*</span>4, <span class="o">(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">use_bias</span><span class="o">=</span>True, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))(</span>d2_4<span class="o">)</span>

  d2_4 <span class="o">=</span> BatchNormalization<span class="o">()(</span>d2_4<span class="o">)</span>
  d2_4 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>d2_4<span class="o">)</span>
  d2_4 <span class="o">=</span> Conv2D<span class="o">(</span>num_filters, <span class="o">(</span>5, 5<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">use_bias</span><span class="o">=</span>True, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))(</span>d2_4<span class="o">)</span>

  d2_4 <span class="o">=</span> concatenate<span class="o">([</span>input, d2_1, d2_2, d2_3, d2_4]<span class="o">)</span>
  <span class="k">return </span>d2_4

def dd_net<span class="o">(</span>ldct_img, <span class="nv">is_training</span><span class="o">=</span> True<span class="o">)</span>:
    net <span class="o">=</span> ldct_img
    num_filter <span class="o">=</span> 16
    <span class="c"># ---A1 Layer-----------------------</span>
    h_conv1 <span class="o">=</span> Conv2D<span class="o">(</span>16, <span class="o">(</span>7, 7<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">use_bias</span><span class="o">=</span>True, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))(</span>net<span class="o">)</span>
    a1 <span class="o">=</span> MaxPooling2D<span class="o">((</span>3, 3<span class="o">)</span>, <span class="nv">strides</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span><span class="o">)</span> <span class="o">(</span>h_conv1<span class="o">)</span>
    <span class="c"># images 256 X 256</span>
    d1 <span class="o">=</span> denseblock<span class="o">(</span>a1<span class="o">)</span>

    a1 <span class="o">=</span> BatchNormalization<span class="o">()(</span>d1<span class="o">)</span>
    a1 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>a1<span class="o">)</span>
    h_conv1_T <span class="o">=</span> Conv2D<span class="o">(</span>16, <span class="o">(</span>1, 1<span class="o">)</span>, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">use_bias</span><span class="o">=</span>True<span class="o">)</span> <span class="o">(</span>a1<span class="o">)</span>

    <span class="c"># ----A2 Layer---------------------</span>
    a2 <span class="o">=</span> MaxPooling2D<span class="o">((</span>2, 2<span class="o">)</span>,strides<span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span><span class="o">)</span> <span class="o">(</span>h_conv1_T<span class="o">)</span>
    <span class="c"># images 128 X 128 d</span>
    d2 <span class="o">=</span> denseblock<span class="o">(</span>a2<span class="o">)</span>

    a2 <span class="o">=</span> BatchNormalization<span class="o">()(</span>d2<span class="o">)</span>
    a2 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>a2<span class="o">)</span>
    h_conv2_T <span class="o">=</span> Conv2D<span class="o">(</span>16, <span class="o">(</span>1, 1<span class="o">)</span>, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">use_bias</span><span class="o">=</span>True<span class="o">)</span> <span class="o">(</span>a2<span class="o">)</span>
    <span class="c"># images 128 X 128</span>

    <span class="c"># # ----A3 Layer----------------------</span>
    a3 <span class="o">=</span> MaxPooling2D<span class="o">((</span>2, 2<span class="o">)</span>, <span class="nv">strides</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span><span class="o">)</span> <span class="o">(</span>h_conv2_T<span class="o">)</span>
    <span class="c"># images 64 X 64</span>
    d3 <span class="o">=</span> denseblock<span class="o">(</span>a3<span class="o">)</span>

    a3 <span class="o">=</span> BatchNormalization<span class="o">()(</span>d3<span class="o">)</span>
    a3 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>a3<span class="o">)</span>
    h_conv3_T <span class="o">=</span> Conv2D<span class="o">(</span>16, <span class="o">(</span>1, 1<span class="o">)</span>, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">use_bias</span><span class="o">=</span>True<span class="o">)</span> <span class="o">(</span>a3<span class="o">)</span>

    <span class="c"># ----A4 Layer----------------------</span>
    a4 <span class="o">=</span> MaxPooling2D<span class="o">((</span>2, 2<span class="o">)</span>, <span class="nv">strides</span><span class="o">=(</span>2, 2<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span><span class="o">)</span> <span class="o">(</span>h_conv3_T<span class="o">)</span>
    <span class="c"># images 32 X 3</span>
    d4 <span class="o">=</span> denseblock<span class="o">(</span>a4<span class="o">)</span>

    a4 <span class="o">=</span> BatchNormalization<span class="o">()(</span>d4<span class="o">)</span>
    a4 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>a4<span class="o">)</span>
    h_conv4_T <span class="o">=</span> Conv2D<span class="o">(</span>16, <span class="o">(</span>1, 1<span class="o">)</span>, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">)</span>, <span class="nv">use_bias</span><span class="o">=</span>True<span class="o">)</span> <span class="o">(</span>a4<span class="o">)</span>

    <span class="c"># #----B1 Layer-----------------------</span>
    b1 <span class="o">=</span> UpSampling2D<span class="o">((</span>2, 2<span class="o">)</span>, <span class="nv">interpolation</span><span class="o">=</span><span class="s2">"nearest"</span><span class="o">)</span> <span class="o">(</span>h_conv4_T<span class="o">)</span>
    <span class="c"># images 64 X 64</span>
    b1 <span class="o">=</span> concatenate<span class="o">([</span>b1, h_conv3_T]<span class="o">)</span>

    b1 <span class="o">=</span> Conv2DTranspose<span class="o">(</span>num_filter<span class="k">*</span>2, <span class="o">(</span>5, 5<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))</span> <span class="o">(</span>b1<span class="o">)</span>
    b1 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>b1<span class="o">)</span>
    b1 <span class="o">=</span> BatchNormalization<span class="o">()(</span>b1<span class="o">)</span>

    b1 <span class="o">=</span> Conv2DTranspose<span class="o">(</span>16, <span class="o">(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))</span> <span class="o">(</span>b1<span class="o">)</span>
    b1 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>b1<span class="o">)</span>
    b1 <span class="o">=</span> BatchNormalization<span class="o">()(</span>b1<span class="o">)</span>

    <span class="c"># #----B2 Layer-----------------------</span>
    b2 <span class="o">=</span> UpSampling2D<span class="o">((</span>2, 2<span class="o">)</span>, <span class="nv">interpolation</span><span class="o">=</span><span class="s2">"nearest"</span><span class="o">)</span> <span class="o">(</span>b1<span class="o">)</span>
    <span class="c"># images 128 X 128</span>
    b2 <span class="o">=</span> concatenate<span class="o">([</span>b2, h_conv2_T]<span class="o">)</span>

    b2 <span class="o">=</span> Conv2DTranspose<span class="o">(</span>num_filter<span class="k">*</span>2, <span class="o">(</span>5, 5<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))</span> <span class="o">(</span>b2<span class="o">)</span>
    b2 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>b2<span class="o">)</span>
    b2 <span class="o">=</span> BatchNormalization<span class="o">()(</span>b2<span class="o">)</span>

    b2 <span class="o">=</span> Conv2DTranspose<span class="o">(</span>16, <span class="o">(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))</span> <span class="o">(</span>b2<span class="o">)</span>
    b2 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>b2<span class="o">)</span>
    b2 <span class="o">=</span> BatchNormalization<span class="o">()(</span>b2<span class="o">)</span>

    <span class="c">#----B3 Layer------------------------conv6</span>
    b3 <span class="o">=</span> UpSampling2D<span class="o">((</span>2, 2<span class="o">)</span>,interpolation<span class="o">=</span><span class="s2">"nearest"</span><span class="o">)</span> <span class="o">(</span>b2<span class="o">)</span>
    <span class="c"># images 256 X 256</span>
    b3 <span class="o">=</span> concatenate<span class="o">([</span>b3, h_conv1_T]<span class="o">)</span>

    b3 <span class="o">=</span> Conv2DTranspose<span class="o">(</span>num_filter<span class="k">*</span>2, <span class="o">(</span>5, 5<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))</span> <span class="o">(</span>b3<span class="o">)</span>
    b3 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>b3<span class="o">)</span>
    b3 <span class="o">=</span> BatchNormalization<span class="o">()(</span>b3<span class="o">)</span>

    b3 <span class="o">=</span> Conv2DTranspose<span class="o">(</span>16, <span class="o">(</span>1, 1<span class="o">)</span>, <span class="nv">padding</span><span class="o">=</span><span class="s1">'same'</span>, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))</span> <span class="o">(</span>b3<span class="o">)</span>
    b3 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>b3<span class="o">)</span>
    b3 <span class="o">=</span> BatchNormalization<span class="o">()(</span>b3<span class="o">)</span>

    <span class="c">#----B4 Layer-------------------------</span>
    b4 <span class="o">=</span> UpSampling2D<span class="o">((</span>2, 2<span class="o">)</span>,interpolation<span class="o">=</span><span class="s2">"nearest"</span><span class="o">)</span> <span class="o">(</span>b3<span class="o">)</span>
    <span class="c"># images 512 X 512</span>
    b4 <span class="o">=</span> concatenate<span class="o">([</span>b4, h_conv1]<span class="o">)</span>
    b4 <span class="o">=</span> Conv2DTranspose<span class="o">(</span>num_filter<span class="k">*</span>2, <span class="o">(</span>5, 5<span class="o">)</span>,padding<span class="o">=</span><span class="s1">'same'</span>, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))</span> <span class="o">(</span>b4<span class="o">)</span>
    b4 <span class="o">=</span> Activation<span class="o">(</span><span class="s1">'relu'</span><span class="o">)(</span>b4<span class="o">)</span>
    <span class="c"># b4 = BatchNormalization()(b4)</span>

    output_img <span class="o">=</span> Conv2DTranspose<span class="o">(</span>1, <span class="o">(</span>1, 1<span class="o">)</span>, <span class="nv">strides</span><span class="o">=(</span>1, 1<span class="o">))</span> <span class="o">(</span>b4<span class="o">)</span>
    <span class="c"># output_img = Activation('relu')(output_img) # in paper but DIDN'T CONVERGE</span>
    <span class="c"># ------ end B4 layer</span>

    denoised_image <span class="o">=</span> Subtract<span class="o">()([</span>net, output_img]<span class="o">)</span>
    <span class="k">return </span>denoised_image


</code></pre></div></div>

<p>Each training process took approximately 24 hours.</p>

<h4 id="how-to-create-a-python-environment-and-train">How to create a python environment and train</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(base) [npovey@ka ~]$ conda create -n keras-gpu python=3.6 numpy scipy keras-gpu
(base) [npovey@ka unet4]$ conda activate keras-gpu
(keras-gpu) [npovey@ka unet4]$ pip install pandas
(keras-gpu) [npovey@ka unet4]$ pip install Pillow
(keras-gpu) [npovey@ka unet4]$ pip install matplotlib
(keras-gpu) [npovey@ka unet4]$ python main.py
</code></pre></div></div>

<h4 id="how-to-train">How to train</h4>

<p>In main.py  (line 77)  use train.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#parser.add_argument('--phase', dest='phase', default='test', help='test')
</span><span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--phase'</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">'phase'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">'train'</span><span class="p">,</span> <span class="n">help</span> <span class="o">=</span><span class="s">'train'</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="how-to-test">How to test</h4>

<p>Change from train to test in main.py  line 77</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#parser.add_argument('--phase', dest='phase', default='test', help='test')
</span><span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--phase'</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">'phase'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">'train'</span><span class="p">,</span> <span class="n">help</span> <span class="o">=</span><span class="s">'train'</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="other-useful-info">Other useful info</h4>

<p>Sign in into remote linux machines</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nps-MacBook-Air-2:Desktop np<span class="nv">$ </span>ssh npovey@ka...
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">ls
</span>main.py  model.py  model.py~  utils.py
</code></pre></div></div>

<p>Got  core dumped problem as all GPUs were taken</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Aborted <span class="o">(</span>core dumped<span class="o">)</span>
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dd_net]<span class="err">$</span>
</code></pre></div></div>

<p>Check available GPUs</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>nvidia-smi <span class="nt">-L</span>
GPU 0: Quadro RTX 5000 <span class="o">(</span>UUID: GPU-1f923d52-ea64-f463-96a4-3bece2719a8b<span class="o">)</span>
GPU 1: Quadro RTX 5000 <span class="o">(</span>UUID: GPU-20947179-1907-5468-1325-a3fc16f5a54e<span class="o">)</span>
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>nvidia-smi
Fri Mar  6 14:25:38 2020       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 418.87.00    Driver Version: 418.87.00    CUDA Version: 10.1     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|<span class="o">===============================</span>+<span class="o">======================</span>+<span class="o">======================</span>|
|   0  Quadro RTX 5000     Off  | 00000000:67:00.0 Off |                  Off |
| 43%   68C    P2   212W / 230W |  15871MiB / 16095MiB |     94%      Default |
+-------------------------------+----------------------+----------------------+
|   1  Quadro RTX 5000     Off  | 00000000:68:00.0 Off |                  Off |
| 55%   78C    P2   221W / 230W |  15869MiB / 16092MiB |     96%      Default |
+-------------------------------+----------------------+----------------------+

+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID   Type   Process name                             Usage      |
|<span class="o">=============================================================================</span>|
|    0     78799      C   python                                     15861MiB |
|    1     26617      C   python                                     15859MiB |
+-----------------------------------------------------------------------------+
WARNING: infoROM is corrupted at gpu 0000:67:00.0
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dd_net]<span class="err">$</span>

</code></pre></div></div>

<p>Looks like both GPUs are taken</p>

<p>Trying a little bit later</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>base<span class="o">)</span> <span class="o">[</span>npovey@ka ~]<span class="nv">$ </span>nvidia-smi
Fri Mar  6 20:23:45 2020       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 418.87.00    Driver Version: 418.87.00    CUDA Version: 10.1     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|<span class="o">===============================</span>+<span class="o">======================</span>+<span class="o">======================</span>|
|   0  Quadro RTX 5000     Off  | 00000000:67:00.0 Off |                  Off |
| 43%   65C    P2    74W / 230W |  15871MiB / 16095MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
|   1  Quadro RTX 5000     Off  | 00000000:68:00.0 Off |                  Off |
| 35%   35C    P0    N/A /  N/A |      0MiB / 16092MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+

+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID   Type   Process name                             Usage      |
|<span class="o">=============================================================================</span>|
|    0     78799      C   python                                     15861MiB |
+-----------------------------------------------------------------------------+
WARNING: infoROM is corrupted at gpu 0000:67:00.0
<span class="o">(</span>base<span class="o">)</span> <span class="o">[</span>npovey@ka ~]<span class="err">$</span>
</code></pre></div></div>

<p>We can observe that GPU1 is free to run our code.</p>

<p>Run the code on the remote linux machine</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka data]<span class="nv">$ </span><span class="nb">cd </span>dd_net/
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">source </span>activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dd_net]<span class="err">$</span>
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>python main.py
</code></pre></div></div>

<p>As the code takes long time to run I recommend running it using screen</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">source </span>activate keras-gpu
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>python main.py
<span class="o">(</span>press ctlr+A, D to detach from screen<span class="o">)</span>
<span class="o">[</span>detached from 6921.dd_net1]

</code></pre></div></div>

<p>To copy result to a local machine and view them</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nps-MacBook-Air-2:Desktop np<span class="nv">$ </span>scp <span class="nt">-r</span> npovey@ka:/home/npovey/data/dd_net/output_dd_net_60.txt DD_Net/
npovey@ka<span class="s1">'s password:
output_dd_net_60.txt                          100%   32KB 321.5KB/s   00:00    
nps-MacBook-Air-2:Desktop np$


</span></code></pre></div></div>

<h5 id="run-sparseview_60">run sparseview_60</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">source </span>activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dncnn1]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_60.txt
</code></pre></div></div>

<h5 id="run-sparseview_90">run sparseview_90</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">source </span>activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_90.txt

</code></pre></div></div>

<p>Got good results:</p>

<h5 id="run-sparseview_180">run sparseview_180</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">source </span>activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_180.txt
</code></pre></div></div>

<h5 id="run-ldcd_7e4">run ldcd_7e4</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">source </span>activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_ldct_7e4.txt
</code></pre></div></div>

<p>Epoch 1/50 Avg PSNR: 40.91373649562122</p>

<p>Epoch 2/50 Avg PSNR: 41.007181141963734</p>

<p>Epoch 3/50 Avg PSNR: 32.428249836375585</p>

<p>Epoch 4/50 Avg PSNR: 32.42561434856395</p>

<p>……</p>

<p>Epoch 50/50 Avg PSNR: 32.427569692000205</p>

<p>#####run ldcd_2e5</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">source </span>activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_ldct_2e5.txt
</code></pre></div></div>

<p>Epoch 0: Avg PSNR: 41.967376293118136</p>

<p>Epoch 1: Avg PSNR: 37.859690812973035</p>

<p>Epoch 2: Avg PSNR: 39.812348874868206</p>

<p>Epoch 9: Avg PSNR: 41.398334420237376</p>

<h5 id="delete-old-data-before-training-on-a-new-dataset">Delete old data before training on a new dataset</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ps aux <span class="o">&gt;</span>text.txt
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">kill</span> <span class="nt">-KILL</span> 10371
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-r</span> logs/
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-r</span> checkpoints
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-r</span> ndct_train.tfrecord
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-r</span> ldct_train.tfrecord
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-r</span> ndct_test.tfrecord
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-r</span> ldct_test.tfrecord
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-r</span> __pycache__/
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-r</span> output_samples/
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-r</span> <span class="nb">test</span>/

<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_60_2.txt

</code></pre></div></div>

<h5 id="train">Train</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka dd_net]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka dncnn1]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_60.txt
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_ldct_7e4.txt
</code></pre></div></div>

<p>copy to local desktop</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nps-MacBook-Air-2:Desktop np<span class="nv">$ </span>scp <span class="nt">-r</span> npovey@ka:/home/npovey/data/ddnet2/main.py <span class="nb">.</span>
npovey@ka<span class="s1">'s password:
main.py                                       100% 7690   305.0KB/s   00:00    
nps-MacBook-Air-2:Desktop np$ scp -r npovey@ka:/home/npovey/data/ddnet2/model.py .
npovey@ka'</span>s password:
model.py                                                                                                               100%   33KB 562.2KB/s   00:00    
<span class="o">(</span>base<span class="o">)</span> nps-MacBook-Air-2:Desktop np<span class="err">$</span>

</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_ldct_2e5.txt
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_ldct_1e5.txt
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_ldct_2e5.txt
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_sparseview_60.txt
CTRL+A D <span class="nb">exit </span>screens mode
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_sparseview_90.txt
CTRL+A D <span class="nb">exit </span>screens mode
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>screen <span class="nt">-S</span> dd_net1
<span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> output_ddnet_sparseview_180.txt
CTRL+A D <span class="nb">exit </span>screens mode
</code></pre></div></div>

<h5 id="to-test">To test</h5>

<p>Change from train to test in main.py  line 77</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#parser.add_argument('--phase', dest='phase', default='test', help='test')
</span><span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--phase'</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">'phase'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">'train'</span><span class="p">,</span> <span class="n">help</span> <span class="o">=</span><span class="s">'train'</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> test_180.txt
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> test_90.txt
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> test_7e4.txt
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> test_1e5.txt
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>conda activate keras-gpu
<span class="o">(</span>keras-gpu<span class="o">)</span> <span class="o">[</span>npovey@ka ddnet2]<span class="nv">$ </span>python main.py <span class="o">&gt;</span> test_2e5.txt
</code></pre></div></div>]]></content><author><name></name></author><category term="update" /><summary type="html"><![CDATA[DenseNet and Deconvolution (linux)]]></summary></entry><entry><title type="html">Deploying a flask application to Elastic Beanstalk</title><link href="http://localhost:4000/update/2020/03/22/aws-flask-app.html" rel="alternate" type="text/html" title="Deploying a flask application to Elastic Beanstalk" /><published>2020-03-22T14:34:33-07:00</published><updated>2020-03-22T14:34:33-07:00</updated><id>http://localhost:4000/update/2020/03/22/aws-flask-app</id><content type="html" xml:base="http://localhost:4000/update/2020/03/22/aws-flask-app.html"><![CDATA[<h3 id="covid-2019-news-and-updates">COVID 2019 News and Updates</h3>

<p>Youtube links</p>

<p>Website explanation tour <a href="https://youtu.be/vOiLUxaxc8k">https://youtu.be/vOiLUxaxc8k</a></p>

<p>How to deploy the flask application  <a href="https://youtu.be/67obIkAPmNs">https://youtu.be/67obIkAPmNs</a></p>

<p>Ho to upload data from guthub <a href="https://youtu.be/vTPN0FltBKA">https://youtu.be/vTPN0FltBKA</a></p>

<h4 id="1-location-of-the-url-for-our-site">1. Location of the URL for our site</h4>

<p><a href="http://flask-covid19-env.eba-wgnwr7pr.us-west-2.elasticbeanstalk.com/">http://flask-covid19-env.eba-wgnwr7pr.us-west-2.elasticbeanstalk.com/</a></p>

<p><img src="/2020-03-22-aws-flask-app/site.png" alt="Screen Shot 2020-03-13 at 6.12.26 PM" /></p>

<h4 id="login">Login</h4>

<p><img src="/2020-03-22-aws-flask-app/1.png" alt="1" /></p>

<h4 id="notify">Notify</h4>

<p><img src="/2020-03-22-aws-flask-app/2.png" alt="2" /></p>

<h4 id="success">Success</h4>

<p><img src="/2020-03-22-aws-flask-app/3.png" alt="3" /></p>

<h4 id="2utilized-cloud-services">2.Utilized Cloud Services</h4>

<ol>
  <li>Website Hosting: AWS BeanStalk</li>
  <li>AWS PostgreSQL</li>
  <li>AWS DynamoDB</li>
  <li>AWS SNS</li>
  <li>Consumes Restfull API- NewsAPI</li>
  <li>AWS S3</li>
</ol>

<h4 id="3-diagrams-for-project">3. Diagrams for Project</h4>

<p>Flask Application</p>

<p>Flask application was deployed to an AWS Elastic Beanstalk environment. S3 bucket was used as cloud storage. Boto3  for Python was used to create, configure, and manage AWS services, such as EC2 and S3. All code was written on MacOS Linux machine with Atom text editor.</p>

<p>This apllication was developed by using the following tutorial on AWS site.</p>

<p><a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-flask.html">https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-flask.html</a></p>

<p><strong>Figure 1: Flow chart for the front page.</strong></p>

<p><img src="/2020-03-22-aws-flask-app/flowchart.jpg" alt="flowchart" /></p>

<p><strong>Figure 2: High Level Design for the website.</strong></p>

<p><img src="/2020-03-22-aws-flask-app/design2.jpg" alt="design2" /></p>

<p>As we can see from the figure above AWS Elastic BeanStalk offeres the loadbalancer. When trafiic grows to our website the systems automatically will be scaled to support the high demand.</p>

<p>Future work includes to automate the data load form Github to the PostgreSQL table. The idea is the data will be copied to S3 bucket and static url to S3 bucket will be used to upload data into PostgraSQL table. Currently all these done manually.</p>

<h4 id="4-why-i-chose-aws">4. Why I Chose AWS</h4>

<p>I chose AWS because MackbookAir is my primary computer and I use Linux as an OS. I tried to develop a webpage using Visual Studio and Azure but Visual Studio for the Macbook Air didn’t have most features that were described in the tutorials that I tried to follow. Also, when I tried to chose a language to code my first choice was JavaScript but pretty soon I didn’t make any progress due to my javascript experience being limited. I finally decided to use Python as my coding language and AWS as a cloud service provider.</p>

<h4 id="5-how-monitoring-is-done-on-the-site">5. How monitoring is done on the site</h4>

<p>Elastick Beanstalk offers monitoring system to customers</p>

<p><a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environments-health.html">https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environments-health.html</a></p>

<p>The document explains that developer can monitor environment health in the AWS management console.</p>

<p>AWS offers moitoring functionality.</p>

<p><img src="/2020-03-22-aws-flask-app/env0.png" alt="env0" /></p>

<p><img src="/2020-03-22-aws-flask-app/env.png" alt="env" /></p>

<p>Click on monitoring</p>

<p>Near the top we can see the stats for the environment. Also, overall environment health is shown in the graphs below.</p>

<p><img src="/2020-03-22-aws-flask-app/monitor.png" alt="monitor" /></p>

<h4 id="6-sla-calculation">6. SLA Calculation</h4>

<ul>
  <li>
    <p>Amazon DynamoDB Service Level Agreement: <strong>99.99%</strong></p>
  </li>
  <li>Amazon Messaging (SQS, SNS) Service Level Agreement: <strong>99.9%</strong></li>
  <li>
    <p>NewsAPI: No uptime SLA as we are using free service. Assumed SLA <strong>99.95%</strong></p>
  </li>
  <li>
    <p>Amazon PostgreSQL Service Level Agreement: <strong>99.95%</strong></p>
  </li>
  <li>
    <p>AWS Elastic BeanStalk: **99.99% **</p>
  </li>
  <li>Amazon S3 Service Level Agreement (“SLA”) : <strong>99.99%</strong></li>
</ul>

<p><strong>Case 1:</strong>  Website</p>

<p>​	[Elastic BeanStalk] 99.99%  * [S3] 99.99% * [PostgreSQL]99.95% = <strong>99.93%</strong></p>

<p><strong>Case 2:</strong> Login and  Create Account Buttons</p>

<p>​	  [DynamoDB] 99.99% * [ Elastic BeanStalk]99.99%  = <strong>99.98%</strong></p>

<p><strong>Case 3:</strong> Notify</p>

<p>​	  [DynamoDB] 99.99% * [ Elastic BeanStalk]99.99% *  [ SNS]99.9%  = <strong>99.88%</strong></p>

<h4 id="7-how-the-site-will-scale-with-load">7. How the site will scale with load</h4>

<p>According to the article in Medium, “Elastic Beanstalk Web servers are provisioned behind a load balancer and handle end-user requests, Elastic Beanstalk provides basic auto-scaling based on metrics collected from the underlying instances. We use Average CPU utilization as a metric for autoscaling.”[1] As load grows AWS will start new instances for us and when the load goes down the service will turn off added instances and downsize according to the new load.</p>

<p>———————————— OTHER USEFUL INFO ——————————————————————————-</p>

<h4 id="sending-an-sms-message">Sending an SMS Message</h4>

<p>AWS offers Simple Notification Services. On the website users will be able to sign up for text notifications</p>

<p><a href="https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html">https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html</a></p>

<p><img src="/2020-03-22-aws-flask-app/sns.png" alt="sns" /></p>

<h5 id="dependencies">Dependencies</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">APScheduler</span><span class="o">==</span>3.6.3
Flask-SQLAlchemy<span class="o">==</span>2.4.1
<span class="nv">SQLAlchemy</span><span class="o">==</span>1.3.13
<span class="nv">boto3</span><span class="o">==</span>1.12.16
<span class="nv">botocore</span><span class="o">==</span>1.15.16
<span class="nv">certifi</span><span class="o">==</span>2019.11.28
<span class="nv">chardet</span><span class="o">==</span>3.0.4
<span class="nv">Click</span><span class="o">==</span>7.0
<span class="nv">docutils</span><span class="o">==</span>0.15.2
<span class="nv">dominate</span><span class="o">==</span>2.5.1
<span class="nv">Flask</span><span class="o">==</span>1.0.2
Flask-Bootstrap<span class="o">==</span>3.3.7.1
Flask-Login<span class="o">==</span>0.5.0
Flask-WTF<span class="o">==</span>0.14.3
<span class="nv">idna</span><span class="o">==</span>2.9
<span class="nv">itsdangerous</span><span class="o">==</span>1.1.0
<span class="nv">Jinja2</span><span class="o">==</span>2.11.1
<span class="nv">jmespath</span><span class="o">==</span>0.9.5
<span class="nv">MarkupSafe</span><span class="o">==</span>1.1.1
newsapi-python<span class="o">==</span>0.2.6
<span class="nv">numpy</span><span class="o">==</span>1.18.1
<span class="nv">pandas</span><span class="o">==</span>1.0.1
python-dateutil<span class="o">==</span>2.8.1
<span class="nv">pytz</span><span class="o">==</span>2019.3
<span class="nv">requests</span><span class="o">==</span>2.23.0
<span class="nv">s3transfer</span><span class="o">==</span>0.3.3
<span class="nv">six</span><span class="o">==</span>1.14.0
<span class="nv">tzlocal</span><span class="o">==</span>2.0.0
<span class="nv">urllib3</span><span class="o">==</span>1.25.8
<span class="nv">visitor</span><span class="o">==</span>0.1.3
<span class="nv">Werkzeug</span><span class="o">==</span>1.0.0
<span class="nv">WTForms</span><span class="o">==</span>2.2.1
psycopg2-binary<span class="o">==</span>2.8.4
</code></pre></div></div>

<p>Project folder info</p>

<p><img src="/2020-03-22-aws-flask-app/folder.png" alt="Screen Shot 2020-03-12 at 6.12.29 PM" /></p>

<p>Created flask-covid19-env</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>virt<span class="o">)</span> nps-MacBook-Air-2:eb-flask np<span class="nv">$ </span>eb create flask-covid19-env
Creating application version archive <span class="s2">"app-200311_225521"</span><span class="nb">.</span>
Uploading: <span class="o">[</span><span class="c">##################################################] 100% Done...</span>
Environment details <span class="k">for</span>: flask-covid19-env
  Application name: flask-covid19
  Region: us-west-2
  Deployed Version: app-200311_225521
  Environment ID: e-qqejrt2ykz
  Platform: arn:aws:elasticbeanstalk:us-west-2::platform/Python 3.6 running on 64bit Amazon Linux/2.9.6
  Tier: WebServer-Standard-1.0
  CNAME: UNKNOWN
  Updated: 2020-03-12 05:56:51.831000+00:00
Printing Status:
2020-03-12 05:56:50    INFO    createEnvironment is starting.
2020-03-12 05:56:52    INFO    Using elasticbeanstalk-us-west-2-051707507732 as Amazon S3 storage bucket <span class="k">for </span>environment data.
2020-03-12 05:57:13    INFO    Created security group named: sg-0f76c5f0cf73c7d18
2020-03-12 05:57:15    INFO    Created load balancer named: awseb-e-q-AWSEBLoa-GTXGDRPFN6IN
2020-03-12 05:57:30    INFO    Created security group named: awseb-e-qqejrt2ykz-stack-AWSEBSecurityGroup-1GTN12UP63STW
2020-03-12 05:57:30    INFO    Created Auto Scaling launch configuration named: awseb-e-qqejrt2ykz-stack-AWSEBAutoScalingLaunchConfiguration-NNY2X3L9Y4WZ
2020-03-12 05:58:33    INFO    Created Auto Scaling group named: awseb-e-qqejrt2ykz-stack-AWSEBAutoScalingGroup-1GTYLLB04SGKE
2020-03-12 05:58:33    INFO    Waiting <span class="k">for </span>EC2 instances to launch. This may take a few minutes.
2020-03-12 05:58:33    INFO    Created Auto Scaling group policy named: arn:aws:autoscaling:us-west-2:051707507732:scalingPolicy:73afe29f-58d2-4c1c-8e52-3254a47d93d1:autoScalingGroupName/awseb-e-qqejrt2ykz-stack-AWSEBAutoScalingGroup-1GTYLLB04SGKE:policyName/awseb-e-qqejrt2ykz-stack-AWSEBAutoScalingScaleUpPolicy-TB4DYH63FMW2
2020-03-12 05:58:33    INFO    Created Auto Scaling group policy named: arn:aws:autoscaling:us-west-2:051707507732:scalingPolicy:13a5cdf4-1cd1-4273-ac4a-f18fbc0232e1:autoScalingGroupName/awseb-e-qqejrt2ykz-stack-AWSEBAutoScalingGroup-1GTYLLB04SGKE:policyName/awseb-e-qqejrt2ykz-stack-AWSEBAutoScalingScaleDownPolicy-2Z20O5HD17XK
2020-03-12 05:58:33    INFO    Created CloudWatch alarm named: awseb-e-qqejrt2ykz-stack-AWSEBCloudwatchAlarmHigh-N3QVZXBFGZKS
2020-03-12 05:58:33    INFO    Created CloudWatch alarm named: awseb-e-qqejrt2ykz-stack-AWSEBCloudwatchAlarmLow-1UN0WN3JQR6WQ
2020-03-12 05:59:41    INFO    Application available at flask-covid19-env.eba-wgnwr7pr.us-west-2.elasticbeanstalk.com.
2020-03-12 05:59:41    INFO    Successfully launched environment: flask-covid19-env

</code></pre></div></div>

<h4 id="bibliography">Bibliography</h4>

<ol>
  <li>Medium article about autoscaling <a href="https://medium.com/tensult/elastic-beanstalk-with-autoscaling-81791a198095">https://medium.com/tensult/elastic-beanstalk-with-autoscaling-81791a198095</a></li>
  <li>AWS CloudWatch <a href="https://aws.amazon.com/cloudwatch/">https://aws.amazon.com/cloudwatch/</a></li>
</ol>]]></content><author><name></name></author><category term="update" /><summary type="html"><![CDATA[COVID 2019 News and Updates]]></summary></entry><entry><title type="html">Eclipse Project to Query PostgreSQL and Output Results on a Website</title><link href="http://localhost:4000/update/2020/02/23/EclipseWebServer.html" rel="alternate" type="text/html" title="Eclipse Project to Query PostgreSQL and Output Results on a Website" /><published>2020-02-23T13:34:33-08:00</published><updated>2020-02-23T13:34:33-08:00</updated><id>http://localhost:4000/update/2020/02/23/EclipseWebServer</id><content type="html" xml:base="http://localhost:4000/update/2020/02/23/EclipseWebServer.html"><![CDATA[<h4 id="eclipse-project-to-query-postgresql-and-output-results-on-a-website">Eclipse Project to Query PostgreSQL and Output Results on a Website</h4>

<p>youtube link: <a href="https://youtu.be/JEboJ6BTipw">https://youtu.be/JEboJ6BTipw</a></p>

<p>The idea is to create a website as the one below.</p>

<p><img src="/2020-02-23-eclipse_web_server/idea.png" alt="idea" /></p>

<h4 id="step-1-setting-up-spark-with-gradle">Step 1: Setting up Spark with Gradle</h4>

<p>Follow this tutorial: <a href="http://sparkjava.com/tutorials/gradle-setup">http://sparkjava.com/tutorials/gradle-setup</a></p>

<p><img src="/2020-02-23-eclipse_web_server/eclipse_main.png" alt="eclipse_main" /></p>

<p><img src="/2020-02-23-eclipse_web_server/eclipse_sql.png" alt="eclipse_sql" /></p>

<h4 id="step-2-install-postgresql">Step 2: Install PostgreSQL</h4>

<p>Follow the following link and install PostgreSQL<a href="https://www.postgresql.org/download/">https://www.postgresql.org/download/</a></p>

<p>####Step 3: Add data to database</p>

<p>Manually added countries. (Future work do it programatically)</p>

<pre><code class="language-txt">China:76943
Diamond Princess:691
South Korea:602
Italy:157
..
</code></pre>

<p><img src="/2020-02-23-eclipse_web_server/postgre.png" alt="postgre" /></p>

<p><img src="/2020-02-23-eclipse_web_server/insert.png" alt="insert" /></p>

<p>####Step 4: Add end point /hello to the main function</p>

<p>This endpoint reads inputs to the form and gets the request</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="n">get</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">,</span> <span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">res</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="s">"Enter country name"</span>
        		<span class="o">+</span> <span class="s">" &lt;form method = post&gt;\n"</span> <span class="o">+</span>
        		<span class="s">"\n"</span> <span class="o">+</span>
        		<span class="s">"  First name:&lt;br&gt;\n"</span> <span class="o">+</span>
        		<span class="s">"  &lt;input type=\"text\" name=\"country\"&gt;\n"</span> <span class="o">+</span>
        		<span class="s">"  &lt;br&gt;\n"</span> <span class="o">+</span>
        		<span class="s">"  &lt;input type=\"submit\" value=\"Submit\"&gt;\n"</span> <span class="o">+</span>
        		<span class="s">"  \n"</span> <span class="o">+</span>
        		<span class="s">"&lt;/form&gt;"</span><span class="o">);</span>
        <span class="n">post</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">,</span> <span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">model</span><span class="o">.</span><span class="na">getCasesCount</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">queryParams</span><span class="o">(</span><span class="s">"country"</span><span class="o">))+</span><span class="s">""</span><span class="o">);</span>
</code></pre></div></div>

<p>####Step 5: Create classes</p>

<p>The following 4 classes needed to create our webserver</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Country.java                                
Sql2oModel.java                                 
Main.java                                      
Model.java                                     
</code></pre></div></div>

<h6 id="mainjava">Main.java</h6>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">crv19</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">spark</span><span class="o">.</span><span class="na">Spark</span><span class="o">.*;</span>
<span class="kn">import</span> <span class="nn">java.util.UUID</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.sql2o.Sql2o</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.sql2o.converters.UUIDConverter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.sql2o.quirks.PostgresQuirks</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//        Sql2o sql2o = new Sql2o("jdbc:postgresql://" + options.dbHost + ":" + options.dbPort + "/" + options.database,</span>

        <span class="nc">Sql2o</span> <span class="n">sql2o</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Sql2o</span><span class="o">(</span><span class="s">"jdbc:postgresql://"</span> <span class="o">+</span> <span class="s">"localhost"</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="s">"5432"</span> <span class="o">+</span> <span class="s">"/"</span> <span class="o">+</span> <span class="s">"crv19"</span><span class="o">,</span>
        		<span class="s">"blog_owner"</span><span class="o">,</span> <span class="s">"np"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">PostgresQuirks</span><span class="o">()</span> <span class="o">{</span>
            <span class="o">{</span>
                <span class="c1">// make sure we use default UUID converter.</span>
                <span class="n">converters</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="no">UUID</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">UUIDConverter</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="nc">Model</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Sql2oModel</span><span class="o">(</span><span class="n">sql2o</span><span class="o">);</span>
        <span class="n">get</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">,</span> <span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">res</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="s">"Enter country name"</span>
        		<span class="o">+</span> <span class="s">" &lt;form method = post&gt;\n"</span> <span class="o">+</span>
        		<span class="s">"\n"</span> <span class="o">+</span>
        		<span class="s">"  First name:&lt;br&gt;\n"</span> <span class="o">+</span>
        		<span class="s">"  &lt;input type=\"text\" name=\"country\"&gt;\n"</span> <span class="o">+</span>
        		<span class="s">"  &lt;br&gt;\n"</span> <span class="o">+</span>
        		<span class="s">"  &lt;input type=\"submit\" value=\"Submit\"&gt;\n"</span> <span class="o">+</span>
        		<span class="s">"  \n"</span> <span class="o">+</span>
        		<span class="s">"&lt;/form&gt;"</span><span class="o">);</span>
        <span class="n">post</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">,</span> <span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">model</span><span class="o">.</span><span class="na">getCasesCount</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">queryParams</span><span class="o">(</span><span class="s">"country"</span><span class="o">))+</span><span class="s">""</span><span class="o">);</span>    
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h6 id="countryjava">Country.java</h6>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">crv19</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Country</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">count</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCount</span><span class="o">(</span><span class="kt">int</span> <span class="n">cases</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">cases</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Model.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">crv19</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Model</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="nf">getCasesCount</span><span class="o">(</span><span class="nc">String</span> <span class="n">countryName</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Sql2oModel.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">crv19</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.sql2o.Connection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.sql2o.Sql2o</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sql2oModel</span> <span class="kd">implements</span> <span class="nc">Model</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Sql2o</span> <span class="n">sql2o</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Sql2oModel</span><span class="o">(</span><span class="nc">Sql2o</span> <span class="n">sql2o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sql2o</span> <span class="o">=</span> <span class="n">sql2o</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCasesCount</span><span class="o">(</span><span class="nc">String</span> <span class="n">countryName</span><span class="o">)</span>  <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">sql2o</span><span class="o">.</span><span class="na">open</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Country</span><span class="o">&gt;</span> <span class="n">countries</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"select * from countries where name=:name "</span><span class="o">)</span>
            		<span class="o">.</span><span class="na">addParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="n">countryName</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">executeAndFetch</span><span class="o">(</span><span class="nc">Country</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="c1">//            countries.forEach((post) -&gt; post.setCategories(getCategoriesFor(conn, post.getPost_uuid())));</span>
           <span class="k">if</span><span class="o">(</span><span class="n">countries</span><span class="o">.</span><span class="na">size</span><span class="o">()==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        	   <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
           <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        	   <span class="k">return</span> <span class="n">countries</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getCount</span><span class="o">();</span>
           <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>####Step 6: Test the server</p>

<p>Connect to localhost with port number 4567. Port number is hardcoded.</p>

<p>Step1:</p>

<p><img src="/2020-02-23-eclipse_web_server/idea.png" alt="idea" /></p>

<p>Step2:  Query the PosgreSQL</p>

<p><img src="/2020-02-23-eclipse_web_server/query_entry.png" alt="query_entry" /></p>

<p>Step3: Output is shown below. The data was entered for Feb 23, 2020,</p>

<p><img src="/2020-02-23-eclipse_web_server/ans.png" alt="ans" /></p>

<h4 id="publish-project-to-aws">Publish project to AWS</h4>

<p>####Step 7: Copy projet to AWS</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>base<span class="o">)</span> nps-MacBook-Air-2:~ np<span class="nv">$ </span>scp <span class="nt">-i</span> ~/.ssh/2019.pem <span class="nt">-r</span> ~/eclipse-workspace/crv19_new ec2-user@ec2-52-41-181-26.us-west-2.compute.amazonaws.com:~/.
Library.class                                  100%  330    14.6KB/s   00:00    
Model.class                                    100%  145     7.8KB/s   00:00    
Main<span class="nv">$1</span>.class                                   100%  607    32.3KB/s   00:00    
Country.class                                  100%  718    34.3KB/s   00:00    
Sql2oModel.class                               100% 1589    74.0KB/s   00:00    
Main.class                                     100% 2373    99.5KB/s   00:00    
LibraryTest.class                              100%  630    24.9KB/s   00:00    
.classpath                                     100%  446    18.8KB/s   00:00    
gradle-wrapper.jar                             100%   53KB 246.8KB/s   00:00    
gradle-wrapper.properties                      100%  200     8.4KB/s   00:00    
gradlew                                        100% 5296   214.0KB/s   00:00    
.gitignore                                     100%   16     0.7KB/s   00:00    
org.eclipse.buildship.core.prefs               100%   54     2.4KB/s   00:00    
.project                                       100%  595    23.1KB/s   00:00    
build.gradle                                   100% 1289    67.9KB/s   00:00    
taskHistory.bin                                100%   74KB 273.2KB/s   00:00    
taskHistory.lock                               100%   17     0.7KB/s   00:00    
fileContent.lock                               100%   17     0.8KB/s   00:00    
annotation-processors.bin                      100%   18KB 301.5KB/s   00:00    
last-build.bin                                 100%    1     0.1KB/s   00:00    
fileHashes.lock                                100%   17     0.9KB/s   00:00    
fileHashes.bin                                 100%   21KB 277.4KB/s   00:00    
resourceHashesCache.bin                        100%   20KB 318.5KB/s   00:00    
cache.properties                               100%   49     2.6KB/s   00:00    
outputFiles.bin                                100%   18KB 287.1KB/s   00:00    
buildOutputCleanup.lock                        100%   17     0.8KB/s   00:00    
LibraryTest.class                              100%  630    29.2KB/s   00:00    
Library.class                                  100%  330    14.9KB/s   00:00    
Model.class                                    100%  145     7.7KB/s   00:00    
Main<span class="nv">$1</span>.class                                   100%  607    13.4KB/s   00:00    
Country.class                                  100% 1702    74.4KB/s   00:00    
Sql2oModel.class                               100% 1732    68.6KB/s   00:00    
Main.class                                     100% 1994    97.0KB/s   00:00    
crv19.jar                                      100% 4561   121.2KB/s   00:00    
results.bin                                    100%   58     2.5KB/s   00:00    
output.bin.idx                                 100%    1     0.1KB/s   00:00    
output.bin                                     100%    0     0.0KB/s   00:00    
TEST-LibraryTest.xml                           100%  385    20.1KB/s   00:00    
MANIFEST.MF                                    100%   25     1.0KB/s   00:00    
index.html                                     100% 2320    86.9KB/s   00:00    
base-style.css                                 100% 2645   115.2KB/s   00:00    
style.css                                      100% 1135    56.1KB/s   00:00    
LibraryTest.html                               100% 1915    74.6KB/s   00:00    
report.js                                      100% 5252   210.2KB/s   00:00    
default-package.html                           100% 1974    85.7KB/s   00:00    
gradlew.bat                                    100% 2260    82.2KB/s   00:00    
settings.gradle                                100%  578    26.5KB/s   00:00    
LibraryTest.java                               100%  360    19.4KB/s   00:00    
Library.java                                   100%  166     8.6KB/s   00:00    
Country.java                                   100%  293    12.8KB/s   00:00    
Sql2oModel.java                                100%  953    41.0KB/s   00:00    
Main.java                                      100% 1195    56.4KB/s   00:00    
Model.java                                     100%   83     3.8KB/s   00:00    
<span class="o">(</span>base<span class="o">)</span> nps-MacBook-Air-2:~ np<span class="err">$</span>
</code></pre></div></div>

<p>####Step 8: Install Gradle on AWS</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>future work
</code></pre></div></div>

<p>####Step 9: Run project</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>future work
</code></pre></div></div>

<p>####Step 10: Test</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>future work
</code></pre></div></div>]]></content><author><name></name></author><category term="update" /><summary type="html"><![CDATA[Eclipse Project to Query PostgreSQL and Output Results on a Website]]></summary></entry><entry><title type="html">Two UNet models, one channel and two channels each</title><link href="http://localhost:4000/update/2020/02/23/new_idea.html" rel="alternate" type="text/html" title="Two UNet models, one channel and two channels each" /><published>2020-02-23T13:34:33-08:00</published><updated>2020-02-23T13:34:33-08:00</updated><id>http://localhost:4000/update/2020/02/23/new_idea</id><content type="html" xml:base="http://localhost:4000/update/2020/02/23/new_idea.html"><![CDATA[<p><strong>A Sparse-View CT Reconstruction Method Based on 2 UNET models</strong></p>

<p>Didn’t produce promising results
The idea was that we use 2 UNet models.</p>
<ol>
  <li>We train first UNet</li>
  <li>Cancatenate training data with denoised data from the first UNet</li>
  <li>Feed 2 channels to a second UNet Model</li>
  <li>Use both unets to reconstruct the test data</li>
</ol>

<p>The results were not very promising. Planning to improve on it.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>After first UNet:    Avg PSNR 37.69669481448519
After second UNet:   AVG PSNR 37.73871974685735
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">drive</span>
<span class="n">drive</span><span class="p">.</span><span class="n">mount</span><span class="p">(</span><span class="s">'/content/drive'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">keras</span>
<span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">matplotlib.image</span> <span class="k">as</span> <span class="n">mpimg</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Conv2D</span><span class="p">,</span> <span class="n">MaxPooling2D</span><span class="p">,</span> <span class="n">Input</span><span class="p">,</span> <span class="n">Dense</span><span class="p">,</span> <span class="n">UpSampling2D</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">BatchNormalization</span><span class="p">,</span> <span class="n">Activation</span><span class="p">,</span> <span class="n">Dropout</span><span class="p">,</span> <span class="n">Subtract</span>
<span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">Model</span>
<span class="kn">from</span> <span class="nn">glob</span> <span class="kn">import</span> <span class="n">glob</span>
<span class="kn">from</span> <span class="nn">keras.layers.convolutional</span> <span class="kn">import</span> <span class="n">Conv2DTranspose</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">concatenate</span>
<span class="kn">from</span> <span class="nn">keras</span> <span class="kn">import</span> <span class="n">optimizers</span>
<span class="kn">from</span> <span class="nn">keras.optimizers</span> <span class="kn">import</span> <span class="n">Adam</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Using TensorFlow backend.
</code></pre></div></div>

<p style="color: red;">
The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br />
We recommend you <a href="https://www.tensorflow.org/guide/migrate" target="_blank">upgrade</a> now
or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:
<a href="https://colab.research.google.com/notebooks/tensorflow_version.ipynb" target="_blank">more info</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># %tensorflow_version 1.x
# import tensorflow as tf
</span><span class="k">print</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">__version__</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.15.0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># print(len(os.listdir('/content/drive/My Drive/Colab Notebooks/CT_data/sparseview_60/train')))
# print(len(os.listdir('/content/drive/My Drive/Colab Notebooks/CT_data/ndct/train')))
# # 3600
# # 3600
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># print(len(os.listdir('/content/drive/My Drive/Colab Notebooks/CT_data/sparseview_60/test/')))
# print(len(os.listdir('/content/drive/My Drive/Colab Notebooks/CT_data/ndct/test/')))
# # # 354
# # # 354
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ndct</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">glob</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/CT_data/ndct/train/*'</span><span class="p">))</span>
<span class="n">ldct</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">glob</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/CT_data/sparseview_60/train/*'</span><span class="p">))</span>

<span class="n">ndct_test</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">glob</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/CT_data/ndct/test/*'</span><span class="p">))</span>
<span class="n">ldct_test</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">glob</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/CT_data/sparseview_60/test/*'</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ndct</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ldct</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ndct_test</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ldct_test</span><span class="p">))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3600
3600
354
354
</code></pre></div></div>

<p>The formulas below will be used to calculate the quality of the reconstruction. Higher PSNR generally indicates high quality of reconstruction.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">cal_psnr</span><span class="p">(</span><span class="n">im1</span><span class="p">,</span> <span class="n">im2</span><span class="p">):</span>
    <span class="c1"># assert pixel value range is 0-255 and type is uint8
</span>    <span class="n">mse</span> <span class="o">=</span> <span class="p">((</span><span class="n">im1</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">float</span><span class="p">)</span> <span class="o">-</span> <span class="n">im2</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">float</span><span class="p">))</span> <span class="o">**</span> <span class="mi">2</span><span class="p">).</span><span class="n">mean</span><span class="p">()</span>
    <span class="n">maxval</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">amax</span><span class="p">(</span><span class="n">im1</span><span class="p">)</span>
    <span class="n">psnr</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">log10</span><span class="p">(</span><span class="n">maxval</span> <span class="o">**</span> <span class="mi">2</span> <span class="o">/</span> <span class="n">mse</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">psnr</span>

<span class="k">def</span> <span class="nf">tf_psnr</span><span class="p">(</span><span class="n">im1</span><span class="p">,</span> <span class="n">im2</span><span class="p">):</span>
    <span class="c1"># assert pixel value range is 0-1
</span>    <span class="c1">#mse = tf.losses.mean_squared_error(labels=im2 * 255.0, predictions=im1 * 255.0)
</span>    <span class="n">mse</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">compat</span><span class="p">.</span><span class="n">v1</span><span class="p">.</span><span class="n">losses</span><span class="p">.</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">labels</span><span class="o">=</span><span class="n">im2</span> <span class="o">*</span> <span class="mf">255.0</span><span class="p">,</span> <span class="n">predictions</span><span class="o">=</span><span class="n">im1</span> <span class="o">*</span> <span class="mf">255.0</span><span class="p">)</span>
    <span class="k">return</span> <span class="mf">10.0</span> <span class="o">*</span> <span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="mf">255.0</span> <span class="o">**</span> <span class="mi">2</span> <span class="o">/</span> <span class="n">mse</span><span class="p">)</span> <span class="o">/</span> <span class="n">tf</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="mf">10.0</span><span class="p">))</span>
</code></pre></div></div>

<p>Using less data: #for i in range(0, 600). Have 3600 in all.
Processing 3600 images takes aprox. 20 minutes to run. But once we create .npy aray we don’t have to rerun this code in the future and we will have .npy form of our data. Colab has 11GB RAM limit.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ndct_imgs_train</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">ndct</span><span class="p">)):</span>                                                                                                                                      
<span class="c1">#for i in range(0, 600):
</span>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">ndct</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="s">'rb'</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">fromfile</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
    <span class="n">ndct_imgs_train</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"len(ndct_imgs_train)....: "</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">ndct_imgs_train</span><span class="p">))</span>
<span class="c1">#len(ndct_imgs_train)....:  3600                                                                                                                                                         
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>len(ndct_imgs_train)....:  3600
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ndct_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">ndct_imgs_train</span><span class="p">)</span>
<span class="n">ndct_train</span> <span class="o">=</span> <span class="n">ndct_train</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3600</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/ndct_train_3600'</span><span class="p">,</span> <span class="n">ndct_train</span><span class="p">)</span> <span class="c1"># save the file as "ndct_train_3600.npy"
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<p>Using different range to use less data to train #for i in range(0, 600). In all have 3600 images. It takes aprox. 20 minutes to process all 3600. But once we create .npy aray we don’t have to rerun this code in the future and we will have .npy form of our data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ldct_imgs_train</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">ldct</span><span class="p">)):</span>
<span class="c1">#for i in range(0, 600):
</span>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">ldct</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="s">'rb'</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">fromfile</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
    <span class="n">ldct_imgs_train</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"len(ldct_imgs_train)....: "</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">ldct_imgs_train</span><span class="p">))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>len(ldct_imgs_train)....:  3600
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ldct_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">ldct_imgs_train</span><span class="p">)</span>
<span class="n">ldct_train</span> <span class="o">=</span> <span class="n">ldct_train</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3600</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/sparseview_60_train_3600'</span><span class="p">,</span> <span class="n">ldct_train</span><span class="p">)</span> <span class="c1"># save the file as "sparseview_60_train_3600.npy"
</span>
</code></pre></div></div>

<p>only using 100 images to test</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ndct_imgs_test</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">ndct_test</span><span class="p">)):</span>
<span class="c1"># for i in range(0, 100):
</span>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">ndct_test</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="s">'rb'</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">fromfile</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
    <span class="n">ndct_imgs_test</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"len(ndct_imgs_test)....: "</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">ndct_imgs_test</span><span class="p">))</span>

</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>len(ndct_imgs_test)....:  354
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ndct_test</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">ndct_imgs_test</span><span class="p">)</span>
<span class="n">ndct_test</span> <span class="o">=</span> <span class="n">ndct_test</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">354</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/ndct_test_354'</span><span class="p">,</span> <span class="n">ndct_test</span><span class="p">)</span> <span class="c1"># save the file as "ndct_test.npy"
</span></code></pre></div></div>

<p>only using 100 images to test</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load the image
</span><span class="n">ldct_imgs_test</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">ldct_test</span><span class="p">)):</span>
<span class="c1"># for i in range(0, 100):
</span>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">ldct_test</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="s">'rb'</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">fromfile</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
    <span class="n">ldct_imgs_test</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"len(ldct_imgs_test)....: "</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">ldct_imgs_test</span><span class="p">))</span>

</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>len(ldct_imgs_test)....:  354
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ldct_test</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">ldct_imgs_test</span><span class="p">)</span>
<span class="n">ldct_test</span> <span class="o">=</span> <span class="n">ldct_test</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">354</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/sparseview_60_test_354'</span><span class="p">,</span> <span class="n">ldct_test</span><span class="p">)</span> <span class="c1"># save the file as "sparseview_60_test.npy"
</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ldct_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/sparseview_60_train_3600.npy'</span><span class="p">)</span> <span class="c1"># loads saved array into variable sparseview_60_train.
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ndct_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/ndct_train_3600.npy'</span><span class="p">)</span> <span class="c1"># loads saved array into variable ndct_train.
</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ldct_test</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/sparseview_60_test_354.npy'</span><span class="p">)</span> <span class="c1"># loads saved array into variable sparseview_60_test.
</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ndct_test</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/ndct_test_354.npy'</span><span class="p">)</span> <span class="c1"># loads saved array into variable ndct_test.
</span>
</code></pre></div></div>

<p>Must reshape images to train</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ldct_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">ldct_imgs_train</span><span class="p">)</span>
<span class="n">ndct_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">ndct_imgs_train</span><span class="p">)</span>

<span class="n">ldct_train</span> <span class="o">=</span> <span class="n">ldct_train</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">600</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">ndct_train</span> <span class="o">=</span> <span class="n">ndct_train</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">600</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>

<span class="n">ldct_test</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">ldct_imgs_test</span><span class="p">)</span>
<span class="n">ndct_test</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">ndct_imgs_test</span><span class="p">)</span>

<span class="c1"># ldct_test = ldct_test.reshape(len(ldct_imgs_test),512,512,1)
# ndct_test = ndct_test.reshape(len(ldct_imgs_test),512,512,1)
</span>
<span class="n">ldct_test</span> <span class="o">=</span> <span class="n">ldct_test</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">ndct_test</span> <span class="o">=</span> <span class="n">ndct_test</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">ldct_train</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">ndct_train</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">ldct_test</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">ndct_test</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>

</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(600, 512, 512, 1)
(600, 512, 512, 1)
(100, 512, 512, 1)
(100, 512, 512, 1)
</code></pre></div></div>

<h5 id="first-unet-to-train">First UNet to train.</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">inputs</span> <span class="o">=</span> <span class="n">Input</span><span class="p">((</span><span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="n">c1</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
<span class="n">c1</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c1</span><span class="p">)</span>
<span class="n">p1</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="n">c1</span><span class="p">)</span>

<span class="n">c2</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">p1</span><span class="p">)</span>
<span class="n">c2</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c2</span><span class="p">)</span>
<span class="n">p2</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="n">c2</span><span class="p">)</span>

<span class="n">c3</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">p2</span><span class="p">)</span>
<span class="n">c3</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c3</span><span class="p">)</span>
<span class="n">p3</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="n">c3</span><span class="p">)</span>

<span class="n">c4</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">p3</span><span class="p">)</span>
<span class="n">c4</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c4</span><span class="p">)</span>
<span class="n">p4</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="n">c4</span><span class="p">)</span>

<span class="n">c5</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">p4</span><span class="p">)</span>
<span class="n">c5</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c5</span><span class="p">)</span>

<span class="n">u6</span> <span class="o">=</span> <span class="n">Conv2DTranspose</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c5</span><span class="p">)</span>
<span class="n">u6</span> <span class="o">=</span> <span class="n">concatenate</span><span class="p">([</span><span class="n">u6</span><span class="p">,</span> <span class="n">c4</span><span class="p">])</span>
<span class="n">c6</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">u6</span><span class="p">)</span>
<span class="n">c6</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c6</span><span class="p">)</span>

<span class="n">u7</span> <span class="o">=</span> <span class="n">Conv2DTranspose</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c6</span><span class="p">)</span>
<span class="n">u7</span> <span class="o">=</span> <span class="n">concatenate</span><span class="p">([</span><span class="n">u7</span><span class="p">,</span> <span class="n">c3</span><span class="p">])</span>
<span class="n">c7</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">u7</span><span class="p">)</span>
<span class="n">c7</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c7</span><span class="p">)</span>

<span class="n">u8</span> <span class="o">=</span> <span class="n">Conv2DTranspose</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c7</span><span class="p">)</span>
<span class="n">u8</span> <span class="o">=</span> <span class="n">concatenate</span><span class="p">([</span><span class="n">u8</span><span class="p">,</span> <span class="n">c2</span><span class="p">])</span>
<span class="n">c8</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">u8</span><span class="p">)</span>
<span class="n">c8</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c8</span><span class="p">)</span>

<span class="n">u9</span> <span class="o">=</span> <span class="n">Conv2DTranspose</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c8</span><span class="p">)</span>
<span class="n">u9</span> <span class="o">=</span> <span class="n">concatenate</span><span class="p">([</span><span class="n">u9</span><span class="p">,</span> <span class="n">c1</span><span class="p">])</span>
<span class="n">c9</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">u9</span><span class="p">)</span>
<span class="n">c9</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c9</span><span class="p">)</span>
<span class="n">output_img</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c9</span><span class="p">)</span>
<span class="n">denoised_image</span> <span class="o">=</span> <span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Subtract</span><span class="p">()([</span><span class="n">inputs</span><span class="p">,</span> <span class="n">output_img</span><span class="p">])</span>
<span class="n">unet_model</span> <span class="o">=</span> <span class="n">Model</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">inputs</span><span class="p">],</span> <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">denoised_image</span><span class="p">])</span>
<span class="n">unet_model</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span> <span class="s">'adam'</span><span class="p">,</span> <span class="n">loss</span><span class="o">=</span><span class="s">'mse'</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="n">tf_psnr</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unet_model</span><span class="p">.</span><span class="n">summary</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">es</span> <span class="o">=</span> <span class="n">keras</span><span class="p">.</span><span class="n">callbacks</span><span class="p">.</span><span class="n">EarlyStopping</span><span class="p">(</span><span class="n">monitor</span><span class="o">=</span><span class="s">'val_loss'</span><span class="p">,</span>
                              <span class="n">min_delta</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
                              <span class="n">patience</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
                              <span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">'auto'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">history</span><span class="o">=</span><span class="n">unet_model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">ldct_train</span><span class="p">,</span> <span class="n">ndct_train</span><span class="p">,</span> <span class="n">validation_split</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">callbacks</span> <span class="o">=</span><span class="p">[</span><span class="n">es</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.

WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1020: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.

WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3005: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.

Train on 3240 samples, validate on 360 samples
Epoch 1/100
WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.

WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.

WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:207: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.

WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:216: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.

WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:223: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.

3240/3240 [==============================] - 52s 16ms/step - loss: 7.7048e-04 - tf_psnr: 31.4804 - val_loss: 4.3303e-04 - val_tf_psnr: 33.7088
Epoch 2/100
3240/3240 [==============================] - 34s 11ms/step - loss: 3.8901e-04 - tf_psnr: 34.1393 - val_loss: 3.2031e-04 - val_tf_psnr: 35.0171
Epoch 3/100
3240/3240 [==============================] - 34s 11ms/step - loss: 2.9320e-04 - tf_psnr: 35.3457 - val_loss: 2.6575e-04 - val_tf_psnr: 35.8361
Epoch 4/100
3240/3240 [==============================] - 34s 11ms/step - loss: 2.5344e-04 - tf_psnr: 35.9755 - val_loss: 2.4150e-04 - val_tf_psnr: 36.2497
Epoch 5/100
3240/3240 [==============================] - 34s 11ms/step - loss: 2.3022e-04 - tf_psnr: 36.3911 - val_loss: 2.4950e-04 - val_tf_psnr: 36.0952
Epoch 6/100
3240/3240 [==============================] - 34s 11ms/step - loss: 2.1732e-04 - tf_psnr: 36.6462 - val_loss: 2.3003e-04 - val_tf_psnr: 36.4655
Epoch 7/100
3240/3240 [==============================] - 34s 11ms/step - loss: 2.0371e-04 - tf_psnr: 36.9202 - val_loss: 2.1188e-04 - val_tf_psnr: 36.8266
Epoch 8/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.9627e-04 - tf_psnr: 37.0844 - val_loss: 2.2196e-04 - val_tf_psnr: 36.6161
Epoch 9/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.8830e-04 - tf_psnr: 37.2653 - val_loss: 1.9891e-04 - val_tf_psnr: 37.1046
Epoch 10/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.8285e-04 - tf_psnr: 37.3927 - val_loss: 1.9869e-04 - val_tf_psnr: 37.0905
Epoch 11/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.7636e-04 - tf_psnr: 37.5490 - val_loss: 1.9422e-04 - val_tf_psnr: 37.2080
Epoch 12/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.7227e-04 - tf_psnr: 37.6516 - val_loss: 1.9111e-04 - val_tf_psnr: 37.2722
Epoch 13/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.6771e-04 - tf_psnr: 37.7666 - val_loss: 1.9058e-04 - val_tf_psnr: 37.2804
Epoch 14/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.6444e-04 - tf_psnr: 37.8551 - val_loss: 1.8667e-04 - val_tf_psnr: 37.3671
Epoch 15/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.6101e-04 - tf_psnr: 37.9435 - val_loss: 1.9904e-04 - val_tf_psnr: 37.0841
Epoch 16/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.5835e-04 - tf_psnr: 38.0169 - val_loss: 1.8485e-04 - val_tf_psnr: 37.4164
Epoch 17/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.5419e-04 - tf_psnr: 38.1306 - val_loss: 1.9395e-04 - val_tf_psnr: 37.1968
Epoch 18/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.5361e-04 - tf_psnr: 38.1504 - val_loss: 1.8514e-04 - val_tf_psnr: 37.4039
Epoch 19/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.5153e-04 - tf_psnr: 38.2060 - val_loss: 2.0618e-04 - val_tf_psnr: 36.9248
Epoch 20/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.4852e-04 - tf_psnr: 38.2960 - val_loss: 1.8025e-04 - val_tf_psnr: 37.5303
Epoch 21/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.4686e-04 - tf_psnr: 38.3444 - val_loss: 1.8222e-04 - val_tf_psnr: 37.4741
Epoch 22/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.4585e-04 - tf_psnr: 38.3717 - val_loss: 1.8267e-04 - val_tf_psnr: 37.4705
Epoch 23/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.4234e-04 - tf_psnr: 38.4769 - val_loss: 1.7893e-04 - val_tf_psnr: 37.5570
Epoch 24/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.4295e-04 - tf_psnr: 38.4612 - val_loss: 1.7711e-04 - val_tf_psnr: 37.6044
Epoch 25/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.3992e-04 - tf_psnr: 38.5515 - val_loss: 1.7688e-04 - val_tf_psnr: 37.6050
Epoch 26/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.3895e-04 - tf_psnr: 38.5830 - val_loss: 1.7389e-04 - val_tf_psnr: 37.6879
Epoch 27/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.3675e-04 - tf_psnr: 38.6529 - val_loss: 1.7448e-04 - val_tf_psnr: 37.6757
Epoch 28/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.3715e-04 - tf_psnr: 38.6393 - val_loss: 1.9051e-04 - val_tf_psnr: 37.2893
Epoch 29/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.3478e-04 - tf_psnr: 38.7145 - val_loss: 1.7553e-04 - val_tf_psnr: 37.6471
Epoch 30/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.3399e-04 - tf_psnr: 38.7393 - val_loss: 1.7569e-04 - val_tf_psnr: 37.6487
Epoch 31/100
3240/3240 [==============================] - 34s 11ms/step - loss: 1.3400e-04 - tf_psnr: 38.7413 - val_loss: 1.7482e-04 - val_tf_psnr: 37.6701
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">reconstructed</span> <span class="o">=</span> <span class="n">unet_model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">ldct_test</span><span class="p">)</span>
<span class="n">psnr</span> <span class="o">=</span> <span class="n">cal_psnr</span><span class="p">(</span><span class="n">ndct_test</span><span class="p">,</span> <span class="n">reconstructed</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"psnr ....."</span><span class="p">,</span><span class="n">psnr</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psnr ..... 37.69669481448519
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unet_model</span><span class="p">.</span><span class="n">save_weights</span><span class="p">(</span><span class="s">"/content/drive/My Drive/Colab Notebooks/new_idea/unet_model_1.h5"</span><span class="p">)</span>
<span class="c1"># unet_model.load_weights("unet_model_1.h5")
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unet_model</span><span class="p">.</span><span class="n">load_weights</span><span class="p">(</span><span class="s">"/content/drive/My Drive/Colab Notebooks/new_idea/unet_model_1.h5"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">reconstructed</span> <span class="o">=</span> <span class="n">unet_model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">ldct_test</span><span class="p">)</span>
<span class="n">psnr</span> <span class="o">=</span> <span class="n">cal_psnr</span><span class="p">(</span><span class="n">ndct_test</span><span class="p">,</span> <span class="n">reconstructed</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"psnr ....."</span><span class="p">,</span><span class="n">psnr</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psnr ..... 37.69669481448519
</code></pre></div></div>

<h5 id="plotting-psnr-values-to-see-the-trend">Plotting PSNR values to see the trend.</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">acc</span> <span class="o">=</span> <span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'tf_psnr'</span><span class="p">]</span>
<span class="n">val_acc</span> <span class="o">=</span> <span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'val_tf_psnr'</span><span class="p">]</span>
<span class="n">loss</span> <span class="o">=</span> <span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'loss'</span><span class="p">]</span>
<span class="n">val_loss</span> <span class="o">=</span> <span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'val_loss'</span><span class="p">]</span>

<span class="n">epochs</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">acc</span><span class="p">))</span>

<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">epochs</span><span class="p">,</span> <span class="n">acc</span><span class="p">,</span> <span class="s">'r'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'Training accuracy'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">epochs</span><span class="p">,</span> <span class="n">val_acc</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'Validation accuracy'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Training and validation accuracy'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/2020-03-17-new_idea/output_43_0.png" alt="png" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Figure size 432x288 with 0 Axes&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">reconstructed</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span>
<span class="n">scalef</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">amax</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="mi">255</span> <span class="o">*</span> <span class="n">a</span><span class="o">/</span><span class="n">scalef</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'uint8'</span><span class="p">)</span>
<span class="c1">#result = Image.fromarray((a * 255).astype(np.uint8))                                                                                                
</span><span class="n">result</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">((</span><span class="n">a</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">))</span>
<span class="c1"># result.save('unet_15_600_0.png')
</span><span class="n">result</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/reconstructed_ddnet_0.png'</span><span class="p">)</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">reconstructed</span><span class="p">[</span><span class="mi">99</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span>
<span class="n">scalef</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">amax</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="mi">255</span> <span class="o">*</span> <span class="n">a</span><span class="o">/</span><span class="n">scalef</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'uint8'</span><span class="p">)</span>
<span class="c1">#result = Image.fromarray((a * 255).astype(np.uint8))                                                                                                
</span><span class="n">result</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">((</span><span class="n">a</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">))</span>
<span class="c1"># result.save('unet_15_600_99.png')
</span><span class="n">result</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/reconstructed_ddnet_99.png'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">ldct_test</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span>
<span class="n">scalef</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">amax</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="mi">255</span> <span class="o">*</span> <span class="n">a</span><span class="o">/</span><span class="n">scalef</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'uint8'</span><span class="p">)</span>
<span class="c1">#result = Image.fromarray((a * 255).astype(np.uint8))                                                                                                
</span><span class="n">result</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">((</span><span class="n">a</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">))</span>
<span class="c1"># result.save('unet_15_600_0.png')
</span><span class="n">result</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/sparseview_60_test_ddnet_0.png'</span><span class="p">)</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">ldct_test</span><span class="p">[</span><span class="mi">99</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span>
<span class="n">scalef</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">amax</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="mi">255</span> <span class="o">*</span> <span class="n">a</span><span class="o">/</span><span class="n">scalef</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'uint8'</span><span class="p">)</span>
<span class="c1">#result = Image.fromarray((a * 255).astype(np.uint8))                                                                                                
</span><span class="n">result</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">((</span><span class="n">a</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">))</span>
<span class="c1"># result.save('unet_15_600_99.png')
</span><span class="n">result</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/sparseview_60_test_ddnet_99.png'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot training &amp; validation accuracy values
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'tf_psnr'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'val_tf_psnr'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Model accuracy'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Accuracy'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Epoch'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">([</span><span class="s">'Train'</span><span class="p">,</span> <span class="s">'Test'</span><span class="p">],</span> <span class="n">loc</span><span class="o">=</span><span class="s">'upper left'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

<span class="c1"># Plot training &amp; validation loss values
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'loss'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'val_loss'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Model loss'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Loss'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Epoch'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">([</span><span class="s">'Train'</span><span class="p">,</span> <span class="s">'Test'</span><span class="p">],</span> <span class="n">loc</span><span class="o">=</span><span class="s">'upper left'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/2020-03-17-new_idea/output_48_0.png" alt="png" /></p>

<p><img src="/2020-03-17-new_idea/output_48_1.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span><span class="n">mpimg</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/sparseview_60_test_ddnet_0.png'</span><span class="p">)</span>
<span class="n">imgplot</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
<span class="n">img</span><span class="o">=</span><span class="n">mpimg</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/reconstructed_ddnet_0.png'</span><span class="p">)</span>
<span class="n">imgplot</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/2020-03-17-new_idea/output_49_0.png" alt="png" /></p>

<p><img src="/2020-03-17-new_idea/output_49_1.png" alt="png" /></p>

<p><img src="/2020-03-17-new_idea/sparseview_60_test_ddnet_0.png" alt="sparseview_60_test_ddnet_0" /></p>

<p><img src="/2020-03-17-new_idea/reconstructed_ddnet_0.png" alt="reconstructed_ddnet_0" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span><span class="n">mpimg</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/sparseview_60_test_ddnet_99.png'</span><span class="p">)</span>
<span class="n">imgplot</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
<span class="n">img</span><span class="o">=</span><span class="n">mpimg</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/reconstructed_ddnet_99.png'</span><span class="p">)</span>
<span class="n">imgplot</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="output_50_0.png" alt="png" /></p>

<p><img src="output_50_1.png" alt="png" /></p>

<p><img src="/2020-03-17-new_idea/sparseview_60_test_ddnet_99.png" alt="sparseview_60_test_ddnet_99" /></p>

<p><img src="/2020-03-17-new_idea/reconstructed_ddnet_99.png" alt="reconstructed_ddnet_99" /></p>

<p><strong>Second part of the model</strong>
must concatenate original data with reconstructed data</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># unet_model.save_weights("unet_model_1.h5")
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># unet_model.load_weights("model.h5")
</span></code></pre></div></div>

<h5 id="need-matrix-3600-images-that-were-cleaned-using-first-unet">Need matrix 3600 images that were cleaned using first UNet</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">recon_train_set</span> <span class="o">=</span> <span class="n">unet_model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">ldct_train</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/recon_train_set'</span><span class="p">,</span> <span class="n">recon_train_set</span><span class="p">)</span> <span class="c1"># save the file as "recon_train_set.npy"
</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">recon_train_set</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/recon_train_set.npy'</span><span class="p">)</span> <span class="c1"># loads saved array into recon_train_set.
</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">two_channel_matrix</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">recon_train_set</span><span class="p">,</span> <span class="n">ldct_train</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/two_channel_matrix'</span><span class="p">,</span> <span class="n">two_channel_matrix</span><span class="p">)</span> <span class="c1"># save the file as "recon_train_set.npy"
</span>
<span class="c1"># two_channel_matrix = np.load('/content/drive/My Drive/Colab Notebooks/new_idea/two_channel_matrix.npy') # loads saved array into recon_train_set.
</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sliced</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
 <span class="k">return</span> <span class="n">x</span><span class="p">[:,:,:,</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<h5 id="second-unet-has-2-channels">Second UNET has 2 channels</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#train model with 2 chanels
</span><span class="n">inputs</span> <span class="o">=</span> <span class="n">Input</span><span class="p">((</span><span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="n">c1</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
<span class="n">c1</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c1</span><span class="p">)</span>
<span class="n">p1</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="n">c1</span><span class="p">)</span>

<span class="n">c2</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">p1</span><span class="p">)</span>
<span class="n">c2</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c2</span><span class="p">)</span>
<span class="n">p2</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="n">c2</span><span class="p">)</span>

<span class="n">c3</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">p2</span><span class="p">)</span>
<span class="n">c3</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c3</span><span class="p">)</span>
<span class="n">p3</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="n">c3</span><span class="p">)</span>

<span class="n">c4</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">p3</span><span class="p">)</span>
<span class="n">c4</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c4</span><span class="p">)</span>
<span class="n">p4</span> <span class="o">=</span> <span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="n">c4</span><span class="p">)</span>

<span class="n">c5</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">p4</span><span class="p">)</span>
<span class="n">c5</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c5</span><span class="p">)</span>

<span class="n">u6</span> <span class="o">=</span> <span class="n">Conv2DTranspose</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c5</span><span class="p">)</span>
<span class="n">u6</span> <span class="o">=</span> <span class="n">concatenate</span><span class="p">([</span><span class="n">u6</span><span class="p">,</span> <span class="n">c4</span><span class="p">])</span>
<span class="n">c6</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">u6</span><span class="p">)</span>
<span class="n">c6</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c6</span><span class="p">)</span>

<span class="n">u7</span> <span class="o">=</span> <span class="n">Conv2DTranspose</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c6</span><span class="p">)</span>
<span class="n">u7</span> <span class="o">=</span> <span class="n">concatenate</span><span class="p">([</span><span class="n">u7</span><span class="p">,</span> <span class="n">c3</span><span class="p">])</span>
<span class="n">c7</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">u7</span><span class="p">)</span>
<span class="n">c7</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c7</span><span class="p">)</span>

<span class="n">u8</span> <span class="o">=</span> <span class="n">Conv2DTranspose</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c7</span><span class="p">)</span>
<span class="n">u8</span> <span class="o">=</span> <span class="n">concatenate</span><span class="p">([</span><span class="n">u8</span><span class="p">,</span> <span class="n">c2</span><span class="p">])</span>
<span class="n">c8</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">u8</span><span class="p">)</span>
<span class="n">c8</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c8</span><span class="p">)</span>

<span class="n">u9</span> <span class="o">=</span> <span class="n">Conv2DTranspose</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c8</span><span class="p">)</span>
<span class="n">u9</span> <span class="o">=</span> <span class="n">concatenate</span><span class="p">([</span><span class="n">u9</span><span class="p">,</span> <span class="n">c1</span><span class="p">])</span>
<span class="n">c9</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">u9</span><span class="p">)</span>
<span class="n">c9</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c9</span><span class="p">)</span>
<span class="n">output_img</span> <span class="o">=</span> <span class="n">Conv2D</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">'same'</span><span class="p">)</span> <span class="p">(</span><span class="n">c9</span><span class="p">)</span> <span class="c1">#2 channels
</span>
<span class="k">print</span><span class="p">(</span><span class="n">output_img</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Lambda</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">sliced</span><span class="p">(</span><span class="n">x</span><span class="p">))(</span><span class="n">inputs</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">output_img</span><span class="p">)</span>

<span class="n">noise</span> <span class="o">=</span> <span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Subtract</span><span class="p">()([</span><span class="n">s</span><span class="p">,</span> <span class="n">output_img</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">noise</span><span class="p">)</span>
<span class="n">unet_model2</span> <span class="o">=</span> <span class="n">Model</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">inputs</span><span class="p">],</span> <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">noise</span><span class="p">])</span>
<span class="n">unet_model2</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span> <span class="s">'adam'</span><span class="p">,</span> <span class="n">loss</span><span class="o">=</span><span class="s">'mse'</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="n">tf_psnr</span><span class="p">])</span>



</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Tensor("conv2d_57/BiasAdd:0", shape=(?, ?, ?, 1), dtype=float32)
Tensor("input_3:0", shape=(?, ?, ?, 2), dtype=float32)
-----------------
-----------------
Tensor("lambda_1/strided_slice:0", shape=(?, ?, ?, 1), dtype=float32)
Tensor("conv2d_57/BiasAdd:0", shape=(?, ?, ?, 1), dtype=float32)
Tensor("subtract_3/sub:0", shape=(?, ?, ?, 1), dtype=float32)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unet_model2</span><span class="p">.</span><span class="n">summary</span><span class="p">()</span>
</code></pre></div></div>

<p>Ask why the same number of parameters as the first one?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">history</span><span class="o">=</span><span class="n">unet_model2</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">two_channel_matrix</span><span class="p">,</span> <span class="n">ndct_train</span><span class="p">,</span> <span class="n">validation_split</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">callbacks</span> <span class="o">=</span><span class="p">[</span><span class="n">es</span><span class="p">])</span>

</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Train on 3240 samples, validate on 360 samples
Epoch 1/100
3240/3240 [==============================] - 40s 12ms/step - loss: 5.5299e-04 - tf_psnr: 34.0690 - val_loss: 2.2301e-04 - val_tf_psnr: 36.6335
Epoch 2/100
3240/3240 [==============================] - 38s 12ms/step - loss: 1.7058e-04 - tf_psnr: 37.7025 - val_loss: 2.0112e-04 - val_tf_psnr: 37.0598
Epoch 3/100
3240/3240 [==============================] - 38s 12ms/step - loss: 1.5103e-04 - tf_psnr: 38.2230 - val_loss: 1.8514e-04 - val_tf_psnr: 37.4245
Epoch 4/100
3240/3240 [==============================] - 38s 12ms/step - loss: 1.4493e-04 - tf_psnr: 38.4023 - val_loss: 1.8211e-04 - val_tf_psnr: 37.4944
Epoch 5/100
3240/3240 [==============================] - 38s 12ms/step - loss: 1.4072e-04 - tf_psnr: 38.5357 - val_loss: 3.3022e-04 - val_tf_psnr: 34.8510
Epoch 6/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.4096e-04 - tf_psnr: 38.5464 - val_loss: 1.7854e-04 - val_tf_psnr: 37.5808
Epoch 7/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3592e-04 - tf_psnr: 38.6781 - val_loss: 1.7788e-04 - val_tf_psnr: 37.5967
Epoch 8/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3595e-04 - tf_psnr: 38.6868 - val_loss: 1.7684e-04 - val_tf_psnr: 37.6224
Epoch 9/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3401e-04 - tf_psnr: 38.7389 - val_loss: 1.7585e-04 - val_tf_psnr: 37.6471
Epoch 10/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3377e-04 - tf_psnr: 38.7499 - val_loss: 1.7561e-04 - val_tf_psnr: 37.6527
Epoch 11/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3284e-04 - tf_psnr: 38.7768 - val_loss: 1.7597e-04 - val_tf_psnr: 37.6428
Epoch 12/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3300e-04 - tf_psnr: 38.7710 - val_loss: 1.7468e-04 - val_tf_psnr: 37.6759
Epoch 13/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3192e-04 - tf_psnr: 38.8089 - val_loss: 1.7625e-04 - val_tf_psnr: 37.6353
Epoch 14/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3234e-04 - tf_psnr: 38.7964 - val_loss: 1.7818e-04 - val_tf_psnr: 37.5857
Epoch 15/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3064e-04 - tf_psnr: 38.8524 - val_loss: 1.8839e-04 - val_tf_psnr: 37.3357
Epoch 16/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3160e-04 - tf_psnr: 38.8195 - val_loss: 1.7357e-04 - val_tf_psnr: 37.7039
Epoch 17/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3020e-04 - tf_psnr: 38.8632 - val_loss: 1.7328e-04 - val_tf_psnr: 37.7112
Epoch 18/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3085e-04 - tf_psnr: 38.8420 - val_loss: 1.7355e-04 - val_tf_psnr: 37.7039
Epoch 19/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.2982e-04 - tf_psnr: 38.8767 - val_loss: 1.7266e-04 - val_tf_psnr: 37.7271
Epoch 20/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.3055e-04 - tf_psnr: 38.8558 - val_loss: 1.7392e-04 - val_tf_psnr: 37.6948
Epoch 21/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.2954e-04 - tf_psnr: 38.8852 - val_loss: 1.7343e-04 - val_tf_psnr: 37.7072
Epoch 22/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.2988e-04 - tf_psnr: 38.8775 - val_loss: 1.7325e-04 - val_tf_psnr: 37.7117
Epoch 23/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.2950e-04 - tf_psnr: 38.8883 - val_loss: 1.7271e-04 - val_tf_psnr: 37.7250
Epoch 24/100
3240/3240 [==============================] - 37s 12ms/step - loss: 1.2925e-04 - tf_psnr: 38.8947 - val_loss: 1.7307e-04 - val_tf_psnr: 37.7156
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unet_model2</span><span class="p">.</span><span class="n">save_weights</span><span class="p">(</span><span class="s">"/content/drive/My Drive/Colab Notebooks/new_idea/unet_model_2.h5"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unet_model2</span><span class="p">.</span><span class="n">load_weights</span><span class="p">(</span><span class="s">"/content/drive/My Drive/Colab Notebooks/new_idea/unet_model_2.h5"</span><span class="p">)</span>
</code></pre></div></div>

<p>To predict we should use both models</p>
<ol>
  <li>predict with first model</li>
  <li>predict with second model</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">reconstructed</span> <span class="o">=</span> <span class="n">unet_model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">ldct_test</span><span class="p">)</span>
<span class="n">psnr</span> <span class="o">=</span> <span class="n">cal_psnr</span><span class="p">(</span><span class="n">ndct_test</span><span class="p">,</span> <span class="n">reconstructed</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"psnr 40 epochs....."</span><span class="p">,</span><span class="n">psnr</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psnr 40 epochs..... 37.69669481448519
</code></pre></div></div>

<p>concatenate the denoised images from the first model and our original data</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">two_channel_results</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">reconstructed</span><span class="p">,</span> <span class="n">ldct_test</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">final_results</span> <span class="o">=</span> <span class="n">unet_model2</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">two_channel_results</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">psnr</span> <span class="o">=</span> <span class="n">cal_psnr</span><span class="p">(</span><span class="n">ndct_test</span><span class="p">,</span> <span class="n">final_results</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"psnr ....."</span><span class="p">,</span><span class="n">psnr</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psnr ..... 37.73871974685735
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot training &amp; validation accuracy values
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'tf_psnr'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'val_tf_psnr'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Model accuracy'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Accuracy'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Epoch'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">([</span><span class="s">'Train'</span><span class="p">,</span> <span class="s">'Test'</span><span class="p">],</span> <span class="n">loc</span><span class="o">=</span><span class="s">'upper left'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

<span class="c1"># Plot training &amp; validation loss values
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'loss'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">history</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="s">'val_loss'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Model loss'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Loss'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Epoch'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">([</span><span class="s">'Train'</span><span class="p">,</span> <span class="s">'Test'</span><span class="p">],</span> <span class="n">loc</span><span class="o">=</span><span class="s">'upper left'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/2020-03-17-new_idea/output_75_0.png" alt="png" /></p>

<p><img src="/2020-03-17-new_idea/output_75_1.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">reconstructed</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span>
<span class="n">scalef</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">amax</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="mi">255</span> <span class="o">*</span> <span class="n">a</span><span class="o">/</span><span class="n">scalef</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'uint8'</span><span class="p">)</span>
<span class="c1">#result = Image.fromarray((a * 255).astype(np.uint8))                                                                                                
</span><span class="n">result</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">((</span><span class="n">a</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">))</span>
<span class="c1"># result.save('unet_15_600_0.png')
</span><span class="n">result</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/reconstructed_0_sec_model.png'</span><span class="p">)</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">reconstructed</span><span class="p">[</span><span class="mi">99</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span>
<span class="n">scalef</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">amax</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="mi">255</span> <span class="o">*</span> <span class="n">a</span><span class="o">/</span><span class="n">scalef</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'uint8'</span><span class="p">)</span>
<span class="c1">#result = Image.fromarray((a * 255).astype(np.uint8))                                                                                                
</span><span class="n">result</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">((</span><span class="n">a</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">))</span>
<span class="c1"># result.save('unet_15_600_99.png')
</span><span class="n">result</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/reconstructed_99_sec_model.png'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">ldct_test</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span>
<span class="n">scalef</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">amax</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="mi">255</span> <span class="o">*</span> <span class="n">a</span><span class="o">/</span><span class="n">scalef</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'uint8'</span><span class="p">)</span>
<span class="c1">#result = Image.fromarray((a * 255).astype(np.uint8))                                                                                                
</span><span class="n">result</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">((</span><span class="n">a</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">))</span>
<span class="c1"># result.save('unet_15_600_0.png')
</span><span class="n">result</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/sparseview_60_test_0_sec_mod.png'</span><span class="p">)</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">ldct_test</span><span class="p">[</span><span class="mi">99</span><span class="p">].</span><span class="n">reshape</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span>
<span class="n">scalef</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">amax</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="mi">255</span> <span class="o">*</span> <span class="n">a</span><span class="o">/</span><span class="n">scalef</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'uint8'</span><span class="p">)</span>
<span class="c1">#result = Image.fromarray((a * 255).astype(np.uint8))                                                                                                
</span><span class="n">result</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">((</span><span class="n">a</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">))</span>
<span class="c1"># result.save('unet_15_600_99.png')
</span><span class="n">result</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/sparseview_60_test_99_sec_mod.png'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span><span class="n">mpimg</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/sparseview_60_test_0_sec_mod.png'</span><span class="p">)</span>
<span class="n">imgplot</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
<span class="n">img</span><span class="o">=</span><span class="n">mpimg</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/reconstructed_0_sec_model.png'</span><span class="p">)</span>
<span class="n">imgplot</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/2020-03-17-new_idea/output_78_0.png" alt="png" /></p>

<p><img src="/2020-03-17-new_idea/output_78_1.png" alt="png" /></p>

<p><img src="/2020-03-17-new_idea/sparseview_60_test_0_sec_mod.png" alt="sparseview_60_test_0_sec_mod" /></p>

<p><img src="/2020-03-17-new_idea/reconstructed_0_sec_model.png" alt="reconstructed_0_sec_model" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span><span class="o">=</span><span class="n">mpimg</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/sparseview_60_test_99_sec_mod.png'</span><span class="p">)</span>
<span class="n">imgplot</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
<span class="n">img</span><span class="o">=</span><span class="n">mpimg</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="s">'/content/drive/My Drive/Colab Notebooks/new_idea/reconstructed_99_sec_model.png'</span><span class="p">)</span>
<span class="n">imgplot</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/2020-03-17-new_idea/output_79_0.png" alt="png" /></p>

<p><img src="/2020-03-17-new_idea/output_79_1.png" alt="png" /></p>

<p>Final cleaned images</p>

<p><img src="/2020-03-17-new_idea/sparseview_60_test_99_sec_mod.png" alt="sparseview_60_test_99_sec_mod" /></p>

<p><img src="/2020-03-17-new_idea/reconstructed_99_sec_model.png" alt="reconstructed_99_sec_model" /></p>]]></content><author><name></name></author><category term="update" /><summary type="html"><![CDATA[A Sparse-View CT Reconstruction Method Based on 2 UNET models]]></summary></entry></feed>